<script type="text/x-homegear">
{
    "name": "tls-server-config",
    "readableName": "TLS server configuration",
    "version": "1.0.0",
    "coreNode": true,
    "maxThreadCount": 0
}
</script>
<!--
  Copyright JS Foundation and other contributors, http://js.foundation

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->

<script type="text/x-red" data-template-name="tls-server-config">
    <div class="form-row">
        <label style="width: 120px;" for="node-config-input-name"><i class="fa fa-tag"></i> <span data-i18n="common.label.name"></span></label>
        <input style="width: 60%;" type="text" id="node-config-input-name" data-i18n="[placeholder]common.label.name">
    </div>
    <div class="form-row" class="hide" id="node-config-row-uselocalfiles">
        <input type="checkbox" id="node-config-input-uselocalfiles" style="display: inline-block; width: auto; vertical-align: top;">
        <label for="node-config-input-uselocalfiles" style="width: 70%;"><span data-i18n="tls-server-config.label.use-local-files"></label>
    </div>
    <div class="form-row">
        <label style="width: 120px;"><i class="fa fa-file-text-o"></i> <span data-i18n="tls-server-config.label.cert"></span></label>
        <span class="tls-server-config-input-data">
            <label class="editor-button" for="node-config-input-certfile"><i class="fa fa-upload"></i> <span data-i18n="tls-server-config.label.upload"></span></label>
            <input class="hide" type="file" id="node-config-input-certfile">
            <span id="tls-server-config-certname" style="width: 180px; overflow: hidden; line-height:34px; height:34px; text-overflow: ellipsis; white-space: nowrap; display: inline-block; vertical-align: middle;"> </span>
            <button class="editor-button editor-button-small" id="tls-server-config-button-cert-clear" style="margin-left: 10px"><i class="fa fa-times"></i></button>
        </span>
        <input type="hidden" id="node-config-input-certname">
        <input type="hidden" id="node-config-input-certdata">
        <input class="hide tls-server-config-input-path" style="width: 60%;" type="text" id="node-config-input-cert" data-i18n="[placeholder]tls-server-config.placeholder.cert">
    </div>
    <div class="form-row">
        <label style="width: 120px;" for="node-config-input-key"><i class="fa fa-file-text-o"></i> <span data-i18n="tls-server-config.label.key"></span></label>
        <span class="tls-server-config-input-data">
            <label class="editor-button" for="node-config-input-keyfile"><i class="fa fa-upload"></i> <span data-i18n="tls-server-config.label.upload"></span></label>
            <input class="hide" type="file" id="node-config-input-keyfile">
            <span id="tls-server-config-keyname" style="width: 180px; overflow: hidden; line-height:34px; height:34px; text-overflow: ellipsis; white-space: nowrap; display: inline-block; vertical-align: middle;"> </span>
            <button class="editor-button editor-button-small" id="tls-server-config-button-key-clear" style="margin-left: 10px"><i class="fa fa-times"></i></button>
        </span>
        <input type="hidden" id="node-config-input-keyname">
        <input type="hidden" id="node-config-input-keydata">
        <input class="hide tls-server-config-input-path" style="width: 60%;" type="text" id="node-config-input-key" data-i18n="[placeholder]tls-server-config.placeholder.key">
    </div>
    <div class="form-row">
        <label style="width: 120px;" for="node-config-input-dh"><i class="fa fa-file-text-o"></i> <span data-i18n="tls-server-config.label.dh"></span></label>
        <span class="tls-server-config-input-data">
            <label class="editor-button" for="node-config-input-dhfile"><i class="fa fa-upload"></i> <span data-i18n="tls-server-config.label.upload"></span></label>
            <input class="hide" type="file" title=" " id="node-config-input-dhfile">
            <span id="tls-server-config-dhname" style="width: 180px; overflow: hidden; line-height:34px; height:34px; text-overflow: ellipsis; white-space: nowrap; display: inline-block; vertical-align: middle;"> </span>
            <button class="editor-button editor-button-small" id="tls-server-config-button-dh-clear" style="margin-left: 10px"><i class="fa fa-times"></i></button>
        </span>
        <input type="hidden" id="node-config-input-dhname">
        <input type="hidden" id="node-config-input-dhdata">
        <input class="hide tls-server-config-input-path" style="width: 60%;" type="text" id="node-config-input-dh" data-i18n="[placeholder]tls-server-config.placeholder.dh">
    </div>
    <div class="form-row">
        <input type="checkbox" id="node-config-input-clientauth" style="display: inline-block; width: auto; vertical-align: top;">
        <label for="node-config-input-clientauth" style="width: auto" data-i18n="tls-server-config.label.clientauth"></label>
        <div id="node-config-row-clientauth" class="hide">
            <label style="width: 120px;" for="node-config-input-ca"><i class="fa fa-file-text-o"></i> <span data-i18n="tls-server-config.label.ca"></span></label>
            <span class="tls-server-config-input-data">
                <label class="editor-button" for="node-config-input-cafile"><i class="fa fa-upload"></i> <span data-i18n="tls-server-config.label.upload"></span></label>
                <input class="hide" type="file" title=" " id="node-config-input-cafile">
                <span id="tls-server-config-caname" style="width: 180px; overflow: hidden; line-height:34px; height:34px; text-overflow: ellipsis; white-space: nowrap; display: inline-block; vertical-align: middle;"> </span>
                <button class="editor-button editor-button-small" id="tls-server-config-button-ca-clear" style="margin-left: 10px"><i class="fa fa-times"></i></button>
            </span>
            <input type="hidden" id="node-config-input-caname">
            <input type="hidden" id="node-config-input-cadata">
            <input class="hide tls-server-config-input-path" style="width: 60%;" type="text" id="node-config-input-ca" data-i18n="[placeholder]tls-server-config.placeholder.ca">
        </div>
    </div>
</script>
<script type="text/javascript">
    RED.nodes.registerType('tls-server-config',{
        category: 'config',
        defaults: {
            name: {value:""},
            cert: {value:"", validate: function(v) {
                var currentKey = $("#node-config-input-key").val();
                if (currentKey === undefined) {
                    currentKey = this.key;
                }
                return currentKey === '' || v != '';
            }},
            key: {value:"", validate: function(v) {
                var currentCert = $("#node-config-input-cert").val();
                if (currentCert === undefined) {
                    currentCert = this.cert;
                }
                return currentCert === '' || v != '';
            }},
            dh: {value:"", validate: function(v) {
                var currentDh = $("#node-config-input-dh").val();
                if (currentDh === undefined) {
                    currentDh = this.dh;
                }
                return currentDh === '' || v != '';
            }},
            ca: {value:"", validate: function(v) {
                var currentCa = $("#node-config-input-ca").val();
                if (currentCa === undefined) {
                    currentCa = this.dh;
                }
                return currentCa === '' || v != '';
            }},
            certname: {value:""},
            keyname: {value:""},
            dhname: {value:""},
            caname: {value:""},
            clientauth: {value:false}
        },
        label: function() {
            return this.name || this._("tls-server-config.tls");
        },
        labelStyle: function() {
            return this.name?"node_label_italic":"";
        },
        oneditprepare: function() {
            function updateFileUpload() {
                if ($("#node-config-input-uselocalfiles").is(':checked')) {
                    $(".tls-server-config-input-path").show();
                    $(".tls-server-config-input-data").hide();
                } else {
                    $(".tls-server-config-input-data").show();
                    $(".tls-server-config-input-path").hide();
                }
            }

            RED.comms.homegear().invoke("getNodeData", function(data) {$("#node-config-input-certdata").val(data.result)}, this.id, "certdata.password");
            RED.comms.homegear().invoke("getNodeData", function(data) {$("#node-config-input-keydata").val(data.result)}, this.id, "keydata.password");
            RED.comms.homegear().invoke("getNodeData", function(data) {$("#node-config-input-dhdata").val(data.result)}, this.id, "dhdata.password");
            RED.comms.homegear().invoke("getNodeData", function(data) {$("#node-config-input-cadata").val(data.result)}, this.id, "cadata.password");

            $("#node-config-input-uselocalfiles").on("click",function() {
                updateFileUpload();
            });

            function saveFile(property, file) {
                var dataInputId = "#node-config-input-"+property+"data";
                var filenameInputId = "#node-config-input-"+property+"name";
                var filename = file.name;
                var reader = new FileReader();
                reader.onload = function(event) {
                    $("#tls-server-config-"+property+"name").text(filename);
                    $(filenameInputId).val(filename);
                    $(dataInputId).val(event.target.result);
                }
                reader.readAsText(file,"UTF-8");
            }
            $("#node-config-input-certfile" ).change(function() {
                saveFile("cert", this.files[0]);
            });
            $("#node-config-input-keyfile" ).change(function() {
                saveFile("key", this.files[0]);
            });
            $("#node-config-input-dhfile" ).change(function() {
                saveFile("dh", this.files[0]);
            });
            $("#node-config-input-cafile" ).change(function() {
                saveFile("ca", this.files[0]);
            });

            function clearNameData(prop) {
                $("#tls-server-config-"+prop+"name").text("");
                $("#node-config-input-"+prop+"data").val("");
                $("#node-config-input-"+prop+"name").val("");
            }
            $("#tls-server-config-button-cert-clear").click(function() {
                clearNameData("cert");
            });
            $("#tls-server-config-button-key-clear").click(function() {
                clearNameData("key");
            });
            $("#tls-server-config-button-dh-clear").click(function() {
                clearNameData("dh");
            });
            $("#tls-server-config-button-ca-clear").click(function() {
                clearNameData("ca");
            });

            if (RED.settings.nodeSettings.tlsConfigDisableLocalFiles) {
                $("#node-config-row-uselocalfiles").hide();
            } else {
                $("#node-config-row-uselocalfiles").show();
            }
            // in case paths were set from old TLS config
            if(this.cert || this.key || this.dh) {
                $("#node-config-input-uselocalfiles").prop('checked',true);
            }
            $("#tls-server-config-certname").text(this.certname);
            $("#tls-server-config-keyname").text(this.keyname);
            $("#tls-server-config-dhname").text(this.dhname);
            $("#tls-server-config-caname").text(this.caname);
            updateFileUpload();

            if (typeof this.clientauth === 'undefined') {
                this.clientauth = false;
                $("#node-config-input-clientauth").prop("checked",false);
            }

            function updateClientAuthOptions() {
                if ($("#node-config-input-clientauth").is(':checked')) {
                    $("#node-config-row-clientauth").show();
                } else {
                    $("#node-config-row-clientauth").hide();
                }
            }
            updateClientAuthOptions();
            $("#node-config-input-clientauth").on("click",function() {
                updateClientAuthOptions();
            });
        },
        oneditsave: function() {
            if ($("#node-config-input-uselocalfiles").is(':checked')) {
                clearNameData("dh");
                clearNameData("cert");
                clearNameData("key");
                clearNameData("ca");
            } else {
                $("#node-config-input-dh").val("");
                $("#node-config-input-cert").val("");
                $("#node-config-input-key").val("");
                $("#node-config-input-ca").val("");
            }
            if($("#node-config-input-certdata").val() != '*') RED.comms.homegear().invoke("setNodeData", null, this.id, "certdata.password", $("#node-config-input-certdata").val());
            if($("#node-config-input-keydata").val() != '*') RED.comms.homegear().invoke("setNodeData", null, this.id, "keydata.password", $("#node-config-input-keydata").val());
            if($("#node-config-input-dhdata").val() != '*') RED.comms.homegear().invoke("setNodeData", null, this.id, "dhdata.password", $("#node-config-input-dhdata").val());
            if($("#node-config-input-cadata").val() != '*') RED.comms.homegear().invoke("setNodeData", null, this.id, "cadata.password", $("#node-config-input-cadata").val());
        }
    });
</script>
<script type="text/x-homegear">
{
    "name": "constant",
    "readableName": "Constant",
    "version": "1.0.0",
    "coreNode": true,
    "maxThreadCount": 0
}
</script>
<script type="text/x-red" data-template-name="constant">
    <div class="form-row">
        <label for="node-input-name"><i class="fa fa-tag"></i> <span data-i18n="constant.label.name"></span></label>
        <input type="text" id="node-input-name" data-i18n="[placeholder]constant.label.name"/>
    </div>
    <div class="form-row">
        <label for="node-input-payload"><i class="fa fa-envelope"></i> <span data-i18n="common.label.payload"></span></label>
        <input type="text" id="node-input-payload" style="width:70%"/>
        <input type="hidden" id="node-input-payloadType"/>
    </div>
    <div class="form-row">
        <label style="width: 130px;">&nbsp;</label>
        <input type="checkbox" id="node-input-outputonstartup" style="display: inline-block; width: auto; vertical-align: top;">
        <label for="node-input-outputonstartup" style="width: 65%;" data-i18n="constant.label.outputonstartup"></label>
    </div>
</script>
<script type="text/javascript">
    RED.nodes.registerType('constant',{
        category: 'input',
        namespace: 'variable',
        color:"#87a980",
        defaults: {
            name: {value:""},
            payload: {value:"", validate: RED.validators.typedInput("payload")},
            payloadType: {value:"int"},
            outputonstartup: {value: false}
        },
        inputs:0,
        outputs:1,
        outputInfo: [
            {
                types: ["any"]
            }
        ],
        icon: "arrow-in.png",
        label: function() {
            if (this.name) {
                return this.name;
            } else if (this.payloadType) {
                if (this.payload.length > 0 && this.payload.length < 24) {
                    return this.payload;
                } else {
                    return this.payloadType;
                }
            } else {
                return "constant";
            }
        },
        labelStyle: function() {
            return this.name?"node_label_italic":"";
        },
        oneditprepare: function() {
            if (this.payloadType == null) {
                this.payloadType = "int";
            }
            $("#node-input-payloadType").val(this.payloadType);

            $("#node-input-payload").typedInput({
                default: 'int',
                typeField: $("#node-input-payloadType"),
                types:['bool','int','float','string','array','struct']
            });

            $("#node-input-payload").typedInput('type',this.payloadType);
        },
        button: {
            enabled: function() {
                return !this.changed
            },
            onclick: function() {
                if (this.changed) {
                    return RED.notify(RED._("notification.warning", {message:RED._("notification.warnings.undeployedChanges")}),"warning");
                }
                var value;
                if (this.payloadType == 'bool') value = this.payload == 'true';
                else if (this.payloadType == 'int') value = parseInt(this.payload);
                else if (this.payloadType == 'float') value = parseFloat(this.payload);
                else if (this.payloadType == 'array' || this.payloadType == 'struct') value = JSON.parse(this.payload);
                else value = this.payload;
                RED.comms.homegear().invoke('setNodeVariable', null, this.id, "nodeOutput", value);
            }
        }
    });
</script>

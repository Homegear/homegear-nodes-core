{
  "http-in": {
    "paletteHelp": "<p>Creates an HTTP end-point for creating web services.</p>",
    "help": "<p>Creates an HTTP end-point for creating web services.</p><h3>Outputs</h3><dl class=\"message-properties\"><dt>payload</dt><dd>For a GET request, contains an object of any query string parameters. For file uploads (<code>multipart/form-data</code>) contains an object with the form data (filename is in <code>[&lt;index&gt;]['filename']</code>, the content in <code>[&lt;index&gt;]['file']</code>). Otherwise, contains the body of the HTTP request.</dd><dt>req<span class=\"property-type\">object</span></dt><dd>An HTTP request object. This object contains multiple properties that provide information about the request.<ul><li><code>method</code> - the HTTP method of the incoming request (e. g. <code>GET</code>).</li><li><code>headers</code> - an object containing the HTTP request headers.</li><li><code>query</code> - an object containing any query string parameters.</li><li><code>params</code> - an object containing any route parameters.</li><li><code>cookies</code> - an object containing the cookies for the request.</li></ul></dd></dl><h3>Details</h3><p>The node will listen on the configured path for requests of a particular type. The path can be fully specified, such as <code>/user</code>, or include named parameters that accept any value, such as <code>/user/:name/:info</code> (single level wildcard) or <code>/user/#name</code> (multilevel wildcard). When named parameters are used, their actual value in a request can be accessed under `$['message']['req']['params']`. For multilevel wildcards all levels following the <code>#</code> can be named like this: <code>/user/#name/nameLevel2/nameLevel3</code>. If no name is specified (e. g. <code>/user/:/:</code> or <code>/user/#</code>), the levels are named by their index.</p><p>For requests that include a body, such as a POST or PUT, the contents of the request is made available as <code>$message['payload']</code>.</p><p>If the content type of the request can be determined, the body will be parsed to any appropriate type. For example, <code>application/json</code> will be parsed to its JavaScript object representation.</p><p><b>Note:</b> this node does not send any response to the request. The flow must include an HTTP Response node to complete the request.</p>",
    "output1Description": "For a GET request, <code>payload</code> contains an object of any query string parameters. Otherwise, contains the body of the HTTP request.",
    "label": {
      "server": "Server",
      "method": "Method",
      "url": "URL",
      "doc": "Docs",
      "return": "Return",
      "upload": "Accept file uploads?",
      "status": "Status code",
      "headers": "Headers"
    },
    "server": "Server",
    "setby": "- set by $message['method'] -",
    "basicauth": "Use basic authentication",
    "use-tls": "Enable secure (SSL/TLS) connection",
    "tls-config": "TLS Configuration",
    "utf8": "a UTF-8 string",
    "binary": "a binary buffer",
    "json": "a parsed JSON object",
    "tip": {
      "in": "The url will be relative to ",
      "res": "The messages sent to this node <b>must</b> originate from an <i>http input</i> node",
      "req": "Tip: If the JSON parse fails the fetched string is returned as-is."
    },
    "httpreq": "http request",
    "errors": {
      "not-created": "Cannot create http-in node when httpNodeRoot set to false",
      "missing-path": "missing path",
      "no-response": "No response object",
      "json-error": "JSON parse error",
      "no-url": "No url specified",
      "deprecated-call": "Deprecated call to __method__",
      "invalid-transport": "non-http transport requested"
    }
  },
  "http-request": {
    "paletteHelp": "<p>Sends HTTP requests and returns the response.</p>",
    "help": "<p>Sends HTTP requests and returns the response.</p><h3>Inputs</h3><dl class=\"message-properties\"><dt class=\"optional\">url <span class=\"property-type\">string</span></dt><dd>If not configured in the node, this optional property sets the url of the request.</dd><dt class=\"optional\">method <span class=\"property-type\">string</span></dt><dd>If not configured in the node, this optional property sets the HTTP method of the request. Must be one of <code>GET</code>, <code>PUT</code>, <code>POST</code>, <code>PATCH</code> or <code>DELETE</code>.</dd> <dt class=\"optional\">headers <span class=\"property-type\">object</span></dt><dd>Sets the HTTP headers of the request.</dd><dt class=\"optional\">payload</dt><dd>Sent as the body of the request.</dd></dl><h3>Outputs</h3><dl class=\"message-properties\"><dt>payload <span class=\"property-type\">string | object | buffer</span></dt><dd>The body of the response. The node can be configured to return the body as a string, attempt to parse it as a JSON string or leave it as a binary buffer.</dd><dt>statusCode <span class=\"property-type\">number</span></dt><dd>The status code of the response, or the error code if the request could not be completed.</dd><dt>headers <span class=\"property-type\">object</span></dt><dd>An object containing the response headers.</dd></dl></p>",
    "input1Description": "The input triggering the request.",
    "output1Description": "The resposne received from the web server.",
    "label": {
      "method": "Method",
      "url": "URL",
      "return": "Return"
    },
    "setby": "- set by $message['method'] -",
    "basicauth": "Use basic authentication",
    "use-tls": "Enable secure (SSL/TLS) connection",
    "tls-config": "TLS Configuration",
    "utf8": "a string",
    "binary": "a binary buffer",
    "json": "a parsed JSON object",
    "tip": {
      "req": "Tip: If the JSON parse fails the fetched string is returned as-is."
    }
  },
  "http-response": {
    "paletteHelp": "<p>Sends responses back to requests received from an HTTP Input node.</p>",
    "help": "<p>Sends responses back to requests received from an HTTP Input node.</p><h3>Inputs</h3><dl class=\"message-properties\"><dt>payload <span class=\"property-type\">string</span></dt><dd>The body of the response.</dd><dt class=\"optional\">statusCode <span class=\"property-type\">number</span></dt><dd>If set, this is used as the response status code. Default: 200.</dd><dt class=\"optional\">headers <span class=\"property-type\">object</span></dt><dd>If set, provides HTTP headers to include in the response.</dd><dt class=\"optional\">cookies <span class=\"property-type\">object</span></dt><dd>If set, can be used to set or delete cookies.</dd></dl><h3>Details</h3><p>The <code>statusCode</code> and <code>headers</code> can also be set within the node itself. If a property is set within the node, it cannot be overridden by the corresponding message property.</p><h4>Cookie handling</h4><p>The <code>cookies</code> property must be an object of name/value pairs. The value can be either a string to set the value of the cookie with default options, or it can be an object of options.<p><p>The following example sets two cookies - one called <code>name</code> with a value of <code>nick</code>, the other called <code>session</code> with a value of <code>1234</code> and an expiry set to 15 minutes.</p><pre>$message['cookies'] = {\n    name: 'nick',\n    session: {\n        value: '1234',\n        maxAge: '900000'\n    }\n}</pre><p>All cookie attributes are available, including:</p><ul><li><code>domain</code> - (String) domain name for the cookie</li><li><code>expires</code> - (Date) expiry date in GMT. If not specified or set to 0, creates a session cookie</li><li><code>maxAge</code> - (String) expiry date as relative to the current time in milliseconds</li><li><code>path</code> - (String) path for the cookie. Defaults to /</li><li><code>value</code> - (String) the value to use for the cookie</li></ul><p>To delete a cookie, set its <code>value</code> to <code>null</code>.</p>",
    "input1Description": "The response to send.",
    "label": {
      "method": "Method",
      "url": "URL",
      "doc": "Docs",
      "return": "Return",
      "upload": "Accept file uploads?",
      "status": "Status code",
      "headers": "Headers",
      "server": "Server"
    },
    "setby": "- set by msg.method -",
    "basicauth": "Use basic authentication",
    "use-tls": "Enable secure (SSL/TLS) connection",
    "tls-config": "TLS Configuration",
    "utf8": "a UTF-8 string",
    "binary": "a binary buffer",
    "json": "a parsed JSON object",
    "tip": {
      "in": "The url will be relative to ",
      "res": "The messages sent to this node <b>must</b> originate from an <i>http input</i> node",
      "req": "Tip: If the JSON parse fails the fetched string is returned as-is."
    },
    "httpreq": "http request",
    "errors": {
      "not-created": "Cannot create http-in node when httpNodeRoot set to false",
      "missing-path": "missing path",
      "no-response": "No response object",
      "json-error": "JSON parse error",
      "no-url": "No url specified",
      "deprecated-call": "Deprecated call to __method__",
      "invalid-transport": "non-http transport requested"
    }
  },
  "http-server": {
    "help": "<p>A minimum HTTP server connection requires only a listen address to be added to the default configuration.</p><p>To secure the connection with SSL/TLS, a TLS Configuration must also be configured and selected.</p>",
    "label": {
      "listenaddress": "Listen addr.",
      "port": "Port",
      "use-tls": "Enable secure (SSL/TLS) connection",
      "tls-config": "TLS Configuration",
      "username": "Username",
      "password": "Password"
    },
    "tabs-label": {
      "connection": "Connection",
      "security": "Security"
    },
    "true": "true",
    "false": "false"
  }
}
{
  "tcp/tcp-out.hni": {
    "tcp-out": {
      "paletteHelp": "<p>Sends responses back to requests received from an HTTP Input node.</p>",
      "help": "<p>Sends responses back to requests received from an HTTP Input node.</p><h3>Inputs</h3><dl class=\"message-properties\"><dt>payload <span class=\"property-type\">string</span></dt><dd>The body of the response.</dd><dt class=\"optional\">statusCode <span class=\"property-type\">number</span></dt><dd>If set, this is used as the response status code. Default: 200.</dd><dt class=\"optional\">headers <span class=\"property-type\">object</span></dt><dd>If set, provides HTTP headers to include in the response.</dd><dt class=\"optional\">cookies <span class=\"property-type\">object</span></dt><dd>If set, can be used to set or delete cookies.</dd></dl><h3>Details</h3><p>The <code>statusCode</code> and <code>headers</code> can also be set within the node itself. If a property is set within the node, it cannot be overridden by the corresponding message property.</p><h4>Cookie handling</h4><p>The <code>cookies</code> property must be an object of name/value pairs. The value can be either a string to set the value of the cookie with default options, or it can be an object of options.<p><p>The following example sets two cookies - one called <code>name</code> with a value of <code>nick</code>, the other called <code>session</code> with a value of <code>1234</code> and an expiry set to 15 minutes.</p><pre>$message['cookies'] = {\n    name: 'nick',\n    session: {\n        value: '1234',\n        maxAge: '900000'\n    }\n}</pre><p>All cookie attributes are available, including:</p><ul><li><code>domain</code> - (String) domain name for the cookie</li><li><code>expires</code> - (Date) expiry date in GMT. If not specified or set to 0, creates a session cookie</li><li><code>maxAge</code> - (String) expiry date as relative to the current time in milliseconds</li><li><code>path</code> - (String) path for the cookie. Defaults to /</li><li><code>value</code> - (String) the value to use for the cookie</li></ul><p>To delete a cookie, set its <code>value</code> to <code>null</code>.</p>",
      "input1Description": "The response to send.",
      "label": {
            "method": "Method",
            "url": "URL",
            "doc": "Docs",
            "return": "Return",
            "upload": "Accept file uploads?",
            "status": "Status code",
            "headers": "Headers",
            "server": "Server"
        },
        "setby": "- set by msg.method -",
        "basicauth": "Use basic authentication",
        "use-tls": "Enable secure (SSL/TLS) connection",
        "tls-config":"TLS Configuration",
        "utf8": "a UTF-8 string",
        "binary": "a binary buffer",
        "json": "a parsed JSON object",
        "tip": {
            "in": "The url will be relative to ",
            "res": "The messages sent to this node <b>must</b> originate from an <i>http input</i> node",
            "req": "Tip: If the JSON parse fails the fetched string is returned as-is."
        },
        "httpreq": "http request",
        "errors": {
            "not-created": "Cannot create http-in node when httpNodeRoot set to false",
            "missing-path": "missing path",
            "no-response": "No response object",
            "json-error": "JSON parse error",
            "no-url": "No url specified",
            "deprecated-call":"Deprecated call to __method__",
            "invalid-transport":"non-http transport requested"
        }
    }
  }
}
<script type="text/x-homegear">
{
    "name": "debug",
    "readableName": "Debug",
    "version": "1.0.0",
    "coreNode": true,
    "maxThreadCount": 0
}
</script>
<!--
  Copyright 2013, 2015 IBM Corp.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<script type="text/x-red" data-template-name="debug">
    <div class="form-row">
        <label for="node-input-typed-complete"><i class="fa fa-list"></i> <span data-i18n="debug.output"></span></label>
        <input id="node-input-typed-complete" type="text" style="width: 70%">
        <input id="node-input-complete" type="hidden">
    </div>
    <div class="form-row">
        <label for="node-input-console"><i class="fa fa-random"></i> <span data-i18n="debug.to"></span></label>
        <select type="text" id="node-input-console" style="display: inline-block; width: 70%;">
            <option value="debtab" data-i18n="debug.debtab"></option>
            <option value="tabcon" data-i18n="debug.tabcon"></option>
            <option value="hg" data-i18n="debug.hg"></option>
            <option value="debtabhg" data-i18n="debug.debtabhg"></option>
        </select>
    </div>
    <div id="node-input-loglevel-container" class="form-row hide">
        <label for="node-input-loglevel"><i class="fa fa-random"></i> <span data-i18n="debug.loglevel"></span></label>
        <select type="text" id="node-input-loglevel" style="display: inline-block; width: 70%;">
            <option value="5" data-i18n="debug.debug"></option>
            <option value="4" data-i18n="debug.info"></option>
            <option value="3" data-i18n="debug.warning"></option>
            <option value="2" data-i18n="debug.error"></option>
            <option value="1" data-i18n="debug.critical"></option>
        </select>
    </div>
    <div class="form-row">
        <label for="node-input-name"><i class="fa fa-tag"></i> <span data-i18n="common.label.name"></span></label>
        <input type="text" id="node-input-name" data-i18n="[placeholder]common.label.name">
    </div>
</script>
<script type="text/javascript">
	if (!RED) {
	    var RED = {}
	}
	RED.debug = (function() {
	    var config;
	    var messageList;
	    var messageTable;
	    var filter = false;
	    var view = 'list';
	    var messages = [];
	    var messagesByNode = {};
	    var sbc;
	    var activeWorkspace;
	
	    function init(_config) {
	        config = _config;
	
	        var content = $("<div>").css({"position":"relative","height":"100%"});
	        var toolbar = $('<div class="sidebar-header">'+
	            '<span class="button-group"><a id="debug-tab-filter" class="sidebar-header-button" href="#"><i class="fa fa-filter"></i></a></span>'+
	            '<span class="button-group"><a id="debug-tab-clear" title="clear log" class="sidebar-header-button" href="#"><i class="fa fa-trash"></i></a></span></div>').appendTo(content);
	
	
	        var footerToolbar = $('<div>'+
	            // '<span class="button-group">'+
	            //     '<a class="sidebar-footer-button-toggle text-button selected" id="debug-tab-view-list" href="#"><span data-i18n="">list</span></a>'+
	            //     '<a class="sidebar-footer-button-toggle text-button" id="debug-tab-view-table" href="#"><span data-i18n="">table</span></a> '+
	            // '</span>'+
	            '<span class="button-group"><a id="debug-tab-open" title="open in new window" class="sidebar-footer-button" href="#"><i class="fa fa-desktop"></i></a></span> ' +
	            '</div>');
	
	        messageList = $('<div class="debug-content debug-content-list"/>').appendTo(content);
	        sbc = messageList[0];
	        messageTable = $('<div class="debug-content  debug-content-table hide"/>').appendTo(content);
	
	        var filterDialog = $('<div class="debug-filter-box hide">'+
	            '<div class="debug-filter-row">'+
	            '<span class="button-group">'+
	                '<a class="sidebar-header-button-toggle selected" id="debug-tab-filter-all" href="#"><span data-i18n="node-red:debug.sidebar.filterAll">all flows</span></a>'+
	                '<a class="sidebar-header-button-toggle" id="debug-tab-filter-current" href="#"><span data-i18n="node-red:debug.sidebar.filterCurrent">current flow</span></a> '+
	            '</span>'+
	            '</div>'+
	        '</div>').appendTo(content);
	
	        try {
	            content.i18n();
	        } catch(err) {
	            console.log("TODO: i18n library support");
	        }
	
	
	        filterDialog.find('#debug-tab-filter-all').on("click",function(e) {
	            e.preventDefault();
	            if (filter) {
	                $(this).addClass('selected');
	                $('#debug-tab-filter-current').removeClass('selected');
	                filter = !filter;
	                refreshMessageList();
	            }
	        });
	        filterDialog.find('#debug-tab-filter-current').on("click",function(e) {
	            e.preventDefault();
	            if (!filter) {
	                $(this).addClass('selected');
	                $('#debug-tab-filter-all').removeClass('selected');
	                filter = !filter;
	                refreshMessageList();
	            }
	        });
	        // $('#debug-tab-view-list').on("click",function(e) {
	        //     e.preventDefault();
	        //     if (!$(this).hasClass('selected')) {
	        //         $(this).addClass('selected');
	        //         $('#debug-tab-view-table').removeClass('selected');
	        //         showMessageList();
	        //     }
	        // });
	        // $('#debug-tab-view-table').on("click",function(e) {
	        //     e.preventDefault();
	        //     if (!$(this).hasClass('selected')) {
	        //         $(this).addClass('selected');
	        //         $('#debug-tab-view-list').removeClass('selected');
	        //         showMessageTable();
	        //     }
	        // });
	
	
	        toolbar.find('#debug-tab-filter').on("click",function(e) {
	            e.preventDefault();
	            if ($(this).hasClass('selected')) {
	                $(this).removeClass('selected');
	                filterDialog.slideUp(200);
	            } else {
	                $(this).addClass('selected');
	                filterDialog.slideDown(200);
	            }
	        })
	
	        toolbar.find("#debug-tab-clear").click(function(e) {
	            e.preventDefault();
	            $(".debug-message").remove();
	            messageCount = 0;
	            config.clear();
	        });
	
	
	        return {
	            content: content,
	            footer: footerToolbar
	        }
	
	    }
	
	    function getTimestamp() {
	        var d = new Date();
	        return d.toLocaleString();
	    }
	
	    function sanitize(m) {
	        return m.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;");
	    }
	
	    function refreshMessageList(_activeWorkspace) {
	        if (_activeWorkspace) {
	            activeWorkspace = _activeWorkspace;
	        }
	        $(".debug-message").each(function() {
	            $(this).toggleClass('hide',filter&&!$(this).hasClass('debug-message-flow-'+activeWorkspace));
	        });
	    }
	    function refreshMessageTable() {
	
	    }
	
	    function showMessageList() {
	        view = 'list';
	        messageTable.hide();
	        messageTable.empty();
	
	        messages.forEach(function(m) {
	            messageList.append(m.el);
	        })
	        messageList.show();
	    }
	    function showMessageTable() {
	        view = 'table';
	        messageList.hide();
	        messageList.empty();
	
	        Object.keys(messagesByNode).forEach(function(id) {
	            var m = messagesByNode[id];
	            var msg = m.el;
	            var sourceNode = m.source;
	            if (sourceNode) {
	                var wrapper = $("<div>",{id:"debug-message-source-"+sourceNode.id.replace(/\./g,"_")}).appendTo(messageTable);
	                wrapper.append(msg);
	            }
	        });
	        messageTable.show();
	    }
	    function formatString(str) {
	        return str.replace(/\n/g,"&crarr;").replace(/\t/g,"&rarr;");
	    }
	
	    function handleDebugMessage(o) {
	        var msg = document.createElement("div");
	
	        var sourceNode = o._source;
	
	        msg.onmouseenter = function() {
	            msg.style.borderRightColor = "#999";
	            if (o._source) {
	                config.messageMouseEnter(o._source.id);
	            }
	        };
	        msg.onmouseleave = function() {
	            msg.style.borderRightColor = "";
	            if (o._source) {
	                config.messageMouseLeave(o._source.id);
	            }
	        };
	        var name = sanitize(((o.name?o.name:o.id)||"").toString());
	        var topic = sanitize((o.topic||"").toString());
	        var property = sanitize(o.property?o.property:'');
	        var payload = o.msg;
	        var format = sanitize((o.format||"").toString());
	        msg.className = 'debug-message'+(o.level?(' debug-message-level-'+o.level):'') +
	        ((sourceNode&&sourceNode.z)?((" debug-message-flow-"+sourceNode.z+((filter&&(activeWorkspace!==sourceNode.z))?" hide":""))):"");
	        var metaRow = $('<div class="debug-message-meta"></div>').appendTo(msg);
	        $('<span class="debug-message-date">'+ getTimestamp()+'</span>').appendTo(metaRow);
	        if (sourceNode) {
	            $('<a>',{href:"#",class:"debug-message-name"}).html('node: '+(sourceNode.name||sourceNode.id))
	            .appendTo(metaRow)
	            .click(function(evt) {
	                evt.preventDefault();
	                config.messageSourceClick(sourceNode.id);
	            });
	        } else if (name) {
	            $('<span class="debug-message-name">'+name+'</span>').appendTo(metaRow);
	        }
	        // NOTE: relying on function error to have a "type" that all other msgs don't
	        if (o.hasOwnProperty("type") && (o.type === "function")) {
	            var errorLvlType = 'error';
	            var errorLvl = 20;
	            if (o.hasOwnProperty("level") && o.level === 30) {
	                errorLvl = 30;
	                errorLvlType = 'warn';
	            }
	            $(msg).addClass('debug-message-level-' + errorLvl);
	            $('<span class="debug-message-topic">function : (' + errorLvlType + ')</span>').appendTo(metaRow);
	        } else {
	            $('<span class="debug-message-topic">'+
	                (o.topic?topic+' : ':'')+
	                (o.property?'$message[\''+property+'\']':'$message')+" : "+format+
	                '</span>').appendTo(metaRow);
	        }
	        if (format === 'Object' || /^array/.test(format) || format === 'boolean' || format === 'number' ) {
	            payload = JSON.parse(payload);
	        } else if (/error/i.test(format)) {
	            payload = JSON.parse(payload);
	            payload = (payload.name?payload.name+": ":"")+payload.message;
	        } else if (format === 'null') {
	            payload = null;
	        } else if (format === 'undefined') {
	            payload = undefined;
	        } else if (/^buffer/.test(format)) {
	            var buffer = payload;
	            payload = [];
	            for (var c = 0; c < buffer.length; c += 2) {
	                payload.push(parseInt(buffer.substr(c, 2), 16));
	            }
	        }
	        var el = $('<span class="debug-message-payload"></span>').appendTo(msg);
	        RED.utils.createObjectElement(payload,/*true*/null,format).appendTo(el);
	        var atBottom = (sbc.scrollHeight-messageList.height()-sbc.scrollTop) < 5;
	        var m = {
	            el: msg
	        };
	        messages.push(m);
	        if (sourceNode) {
	            m.source = sourceNode;
	            messagesByNode[sourceNode.id] = m;
	        }
	        if (view == "list") {
	            messageList.append(msg);
	        } else {
	            if (sourceNode) {
	                var wrapper = $("#debug-message-source-"+sourceNode.id.replace(/\./g,"_"));
	                if (wrapper.length === 0 ) {
	                    wrapper = $("<div>",{id:"debug-message-source-"+sourceNode.id.replace(/\./g,"_")}).appendTo(messageTable);
	                }
	                wrapper.empty();
	                wrapper.append(msg);
	            }
	        }
	
	        if (messages.length === 100) {
	            m = messages.shift();
	            if (view === "list") {
	                m.el.remove();
	            }
	        }
	        if (atBottom) {
	            messageList.scrollTop(sbc.scrollHeight);
	        }
	    }
	    return {
	        init: init,
	        refreshMessageList:refreshMessageList,
	        handleDebugMessage: handleDebugMessage
	    }
	})();
    var subWindow = null;
    RED.nodes.registerType('debug',{
        category: 'general',
        defaults: {
            name: {value:""},
            active: {value:true},
            console: {value:"debtab"},
            complete: {value:"false", required:true},
            loglevel: {value:"info"}
        },
        label: function() {
            var suffix = "";
            if (this.console === true || this.console === "true") { suffix = " ⇲"; }
            if (this.complete === true || this.complete === "true") {
                return (this.name||"$message") + suffix;
            } else {
                return (this.name || "$message['" + ((!this.complete || this.complete === "false") ? "payload" : this.complete) + "']") + suffix;
            }
        },
        labelStyle: function() {
            return this.name?"node_label_italic":"";
        },
        color:"#87a980",
        inputs:1,
        inputInfo: [
        	{
        		types: ["any"],
        	}
        ],
        outputs:0,
        icon: "debug.svg",
        align: "right",
        button: {
            toggle: "active",
            onclick: function() {
                RED.comms.homegear().invoke('setNodeVariable', null, this.id, "active", this.active?true:false);
            }
        },
        onpaletteadd: function() {

            var options = {
                messageMouseEnter: function(sourceId) {
                    if (sourceId) {
                        var n = RED.nodes.node(sourceId);
                        if (n) {
                            n.highlighted = true;
                            n.dirty = true;
                        }
                        RED.view.redraw();
                    }
                },
                messageMouseLeave: function(sourceId) {
                    if (sourceId) {
                        var n = RED.nodes.node(sourceId);
                        if (n) {
                            n.highlighted = false;
                            n.dirty = true;
                        }
                        RED.view.redraw();
                    }
                },
                messageSourceClick: function(sourceId) {
                    RED.view.reveal(sourceId);
                },
                clear: function() {
                    RED.nodes.eachNode(function(node) {
                        node.highlighted = false;
                        node.dirty = true;
                    });
                    RED.view.redraw();
                }
            }

            var uiComponents = RED.debug.init(options);

            RED.sidebar.addTab({
                id: "debug",
                label: this._("debug.sidebar.label"),
                name: this._("debug.sidebar.name"),
                content: uiComponents.content,
                toolbar: uiComponents.footer,
                enableOnEdit: true,
                pinned: true,
                iconClass: "fa fa-bug",
                action: "core:show-debug-tab"
            });
            RED.actions.add("core:show-debug-tab",function() { RED.sidebar.show('debug')});

            var that = this;
            RED._debug = function(msg) {
                that.handleDebugMessage("",{
                    name:"debug",
                    msg:msg
                });
            }

            this.refreshMessageList = function() {
                RED.debug.refreshMessageList(RED.workspaces.active());
                if (subWindow) {
                    try {
                        subWindow.postMessage({event:"workspaceChange",activeWorkspace:RED.workspaces.active()},"*")
                    } catch(err) {
                        console.log(err);
                    }
                }
            }
            RED.events.on("workspace:change", this.refreshMessageList);

            this.handleDebugMessage = function(t,o) {
                var sourceNode = RED.nodes.node(o.id) || RED.nodes.node(o.z);
                if (sourceNode) {
                    o._source = {id:sourceNode.id,z:sourceNode.z,name:sourceNode.name};

                }
                RED.debug.handleDebugMessage(o);
                if (subWindow) {
                    try {
                        subWindow.postMessage({event:"message",msg:o},"*")
                    } catch(err) {
                        console.log(err);
                    }
                }
            };
            RED.comms.subscribe("debug",this.handleDebugMessage);

            $("#debug-tab-open").click(function(e) {
                e.preventDefault();
                subWindow = window.open(document.location.toString().replace(/[?#].*$/,"")+"debug/view/view.html"+document.location.search,"nodeREDDebugView","menubar=no,location=no,toolbar=no,chrome,height=500,width=600");
                subWindow.onload = function() {
                    subWindow.postMessage({event:"workspaceChange",activeWorkspace:RED.workspaces.active()},"*");
                }
            });

            $(window).unload(function() {
                if (subWindow) {
                    try {
                        subWindow.close()
                    } catch(err) {
                        console.log(err);
                    }
                }
            });

            this.handleWindowMessage = function(evt) {
                var msg = evt.data;
                if (msg.event === "mouseEnter") {
                    options.messageMouseEnter(msg.id);
                } else if (msg.event === "mouseLeave") {
                    options.messageMouseLeave(msg.id);
                } else if (msg.event === "mouseClick") {
                    options.messageSourceClick(msg.id);
                } else if (msg.event === "clear") {
                    options.clear();
                }
            }
            window.addEventListener('message',this.handleWindowMessage);
        },
        onpaletteremove: function() {
            RED.comms.unsubscribe("debug",this.handleDebugMessage);
            RED.sidebar.removeTab("debug");
            RED.events.off("workspace:change", this.refreshMessageList);
            window.removeEventListener("message",this.handleWindowMessage);
            RED.actions.remove("core:show-debug");

            delete RED._debug;
        },
        oneditprepare: function() {
            $("#node-input-typed-complete").typedInput({types:[{value:"msg",label:"$message."}, {value:"full",label:RED._("debug/debug.hni:debug.msgobj"),hasValue:false}]});
            if (this.complete === "true" || this.complete === true) {
                // show complete message object
                $("#node-input-typed-complete").typedInput('type','full');
            } else {
                var property = (!this.complete||(this.complete === "false")) ? "payload" : this.complete+"";
                $("#node-input-typed-complete").typedInput('type','msg');
                $("#node-input-typed-complete").typedInput('value',property);
            }
            $("#node-input-typed-complete").on('change',function() {
                if ($("#node-input-typed-complete").typedInput('type') === 'msg'
                    &&
                    $("#node-input-typed-complete").typedInput('value') === ''
                ) {
                    $("#node-input-typed-complete").typedInput('value','payload');
                }
            });

            function updateLogLevelOptions() {
                var logType = $("#node-input-console").val();
                if (logType == "hg" || logType == "debtabhg") {
                    $("#node-input-loglevel-container").show();
                } else {
                    $("#node-input-loglevel-container").hide();
                }
            }

            updateLogLevelOptions();
            $("#node-input-console").on("change",function() {
                updateLogLevelOptions();
            });
        },
        oneditsave: function() {
            var type = $("#node-input-typed-complete").typedInput('type');
            if (type === 'full') {
                $("#node-input-complete").val("true");
            } else {
                $("#node-input-complete").val($("#node-input-typed-complete").typedInput('value'));
            }
        }
    });
</script>

<style>
    #debug-content {
        position: absolute;
        top: 43px;
        bottom: 0px;
        left:0px;
        right: 0px;
        overflow-y: scroll;
    }
    .debug-message {
        cursor: pointer;
        border-bottom: 1px solid #eee;
        border-left: 8px solid #eee;
        border-right: 8px solid #eee;
        padding: 2px;
    }
    .debug-message-date {
        background: #fff;
        font-size: 9px;
        color: #aaa;
        padding: 1px 5px 1px 1px;
    }
    .debug-message-topic {
        display: block;
        background: #fff;
        padding: 1px;
        font-size: 10px;
        color: #a66;
    }
    .debug-message-name {
        background: #fff;
        padding: 1px 5px;
        font-size: 9px;
        color: #aac;
    }
    .debug-message-payload {
        display: block;
        padding: 2px;
        background: #fff;
    }
    .debug-message-level-log {
        border-left-color: #eee;
        border-right-color: #eee;
    }
    .debug-message-level-30 {
        border-left-color: #ffdf9d;
        border-right-color: #ffdf9d;
    }
    .debug-message-level-20 {
        border-left-color: #f99;
        border-right-color: #f99;
    }
</style>

<script type="text/x-homegear">
{
    "name": "change",
    "readableName": "Change",
    "version": "1.0.0",
    "coreNode": true,
    "maxThreadCount": 0
}
</script>
<!-- Source was modified from original by Sathya Laufer -->
<!--
  Copyright JS Foundation and other contributors, http://js.foundation

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<script type="text/x-red" data-template-name="change">
    <div class="form-row">
        <label for="node-input-name"><i class="fa fa-tag"></i> <span data-i18n="common.label.name"></span></label>
        <input type="text" id="node-input-name" data-i18n="[placeholder]common.label.name">
    </div>
    <div class="form-row" style="margin-bottom:0;">
        <label><i class="fa fa-list"></i> <span data-i18n="change.label.rules"></span></label>
    </div>
    <div class="form-row node-input-rule-container-row">
        <ol id="node-input-rule-container"></ol>
    </div>
</script>
<script type="text/javascript">
RED.nodes.registerType('change', {
    color: "#E2D96E",
    category: 'logic',
    namespace: 'basic-logic',
    defaults: {
        name: {value:""},
        rules:{value:[{t:"set",p:"payload",pt:"message",to:"",tot:"string"}]}
    },
    inputs: 1,
    outputs: 1,
    icon: "swap.svg",
    label: function() {
        return this.name||"change";
    },
    labelStyle: function() {
        return this.name ? "node_label_italic" : "";
    },
    oneditprepare: function() {
        var set = this._("change.action.set");
        var change = this._("change.action.change");
        var del = this._("change.action.delete");
        var move = this._("change.action.move");
        var to = this._("change.action.to");
        var search = this._("change.action.search");
        var replace = this._("change.action.replace");
        var regex = this._("change.label.regex");

        var messageValueType = {value:"message",label:this._("change.message"),hasValue:true};
        var flowValueType = {value:"flow",label:this._("change.flow"),hasValue:true};
        var globalValueType = {value:"global",label:this._("change.global"),hasValue:true};
        var envValueType = {value:"env",label:this._("change.env"),hasValue:true};
        var regexValueType = {value:"regex",label:"regex",icon:"red/images/typedInput/re.svg",hasValue:true};

        function resizeRule(rule) {
            var newWidth = rule.width();
            rule.find('.red-ui-typedInput').typedInput("width",newWidth-130);

        }
        $('#node-input-rule-container').css('min-height','300px').css('min-width','450px').editableList({
            addItem: function(container,i,opt) {
                var rule = opt;
                if (!rule.hasOwnProperty('t')) {
                    rule = {t:"set",p:"payload",to:"",tot:"str"};
                }
                if (rule.t === "change" && rule.re) {
                    rule.fromt = 'regex';
                    delete rule.re;
                }
                if (rule.t === "set" && !rule.tot) {
                    if (rule.to.indexOf("message.") === 0 && !rule.tot) {
                        rule.to = rule.to.substring(4);
                        rule.tot = "message";
                    } else {
                        rule.tot = "string";
                    }
                }
                if (rule.t === "move" && !rule.tot) {
                    rule.tot = "message";
                }
                container.css({
                    overflow: 'hidden',
                    whiteSpace: 'nowrap'
                });
                var row1 = $('<div/>').appendTo(container);
                var row2 = $('<div/>',{style:"margin-top:8px;"}).appendTo(container);
                var row3 = $('<div/>',{style:"margin-top:8px;"}).appendTo(container);
                var row4 = $('<div/>',{style:"margin-top:8px;"}).appendTo(container);

                var selectField = $('<select/>',{class:"node-input-rule-type",style:"width:110px; margin-right:10px;"}).appendTo(row1);
                var selectOptions = [{v:"set",l:set},{v:"change",l:change},{v:"delete",l:del},{v:"move",l:move}];
                for (var i=0; i<4; i++) {
                    selectField.append($("<option></option>").val(selectOptions[i].v).text(selectOptions[i].l));
                }

                var propertyName = $('<input/>',{class:"node-input-rule-property-name",type:"text"})
                    .appendTo(row1)
                    .typedInput({types:[messageValueType,flowValueType,globalValueType]});

                $('<div/>',{style:"display:inline-block;text-align:right; width:120px; padding-right:10px; box-sizing:border-box;"})
                    .text(to)
                    .appendTo(row2);
                var propertyValue = $('<input/>',{class:"node-input-rule-property-value",type:"text"})
                    .appendTo(row2)
                    .typedInput({default:'string',types:[messageValueType,flowValueType,globalValueType,envValueType,'bool','int','float','string']});

                var row3_1 = $('<div/>').appendTo(row3);
                $('<div/>',{style:"display:inline-block;text-align:right; width:120px; padding-right:10px; box-sizing:border-box;"})
                    .text(search)
                    .appendTo(row3_1);
                var fromValue = $('<input/>',{class:"node-input-rule-property-search-value",type:"text"})
                    .appendTo(row3_1)
                    .typedInput({default:'string',types:[messageValueType,flowValueType,globalValueType,'string',regexValueType,'int','float','bool']});

                var row3_2 = $('<div/>',{style:"margin-top:8px;"}).appendTo(row3);
                $('<div/>',{style:"display:inline-block;text-align:right; width:120px; padding-right:10px; box-sizing:border-box;"})
                    .text(replace)
                    .appendTo(row3_2);
                var toValue = $('<input/>',{class:"node-input-rule-property-replace-value",type:"text"})
                    .appendTo(row3_2)
                    .typedInput({default:'string',types:[messageValueType,flowValueType,globalValueType,'bool','int','float','string']});

                $('<div/>',{style:"display:inline-block;text-align:right; width:120px; padding-right:10px; box-sizing:border-box;"})
                    .text(to)
                    .appendTo(row4);
                var moveValue = $('<input/>',{class:"node-input-rule-property-move-value",type:"text"})
                    .appendTo(row4)
                    .typedInput({default:'message',types:[messageValueType,flowValueType,globalValueType]});

                selectField.on("change", function() {
                    var width = $("#node-input-rule-container").width();
                    var type = $(this).val();
                    if (type == "set") {
                        row2.show();
                        row3.hide();
                        row4.hide();
                    } else if (type == "change") {
                        row2.hide();
                        row3.show();
                        row4.hide();
                    } else if (type == "delete") {
                        row2.hide();
                        row3.hide();
                        row4.hide();
                    } else if (type == "move") {
                        row2.hide();
                        row3.hide();
                        row4.show();
                    }
                    resizeRule(container);
                });

                selectField.val(rule.t);
                propertyName.typedInput('value',rule.p);
                propertyName.typedInput('type',rule.pt);
                propertyValue.typedInput('value',rule.to);
                propertyValue.typedInput('type',rule.tot);
                moveValue.typedInput('value',rule.to);
                moveValue.typedInput('type',rule.tot);
                fromValue.typedInput('value',rule.from);
                fromValue.typedInput('type',rule.fromt);
                toValue.typedInput('value',rule.to);
                toValue.typedInput('type',rule.tot);
                selectField.change();

                var newWidth = $("#node-input-rule-container").width();
                resizeRule(container);
            },
            resizeItem: resizeRule,
            removable: true,
            sortable: true
        });

        for (var i=0; i<this.rules.length; i++) {
            var rule = this.rules[i];
            $("#node-input-rule-container").editableList('addItem',rule);
        }
    },
    oneditsave: function() {
        var rules = $("#node-input-rule-container").editableList('items');
        var ruleset;
        var node = this;
        node.rules= [];
        rules.each(function(i) {
            var rule = $(this);
            var type = rule.find(".node-input-rule-type").val();
            var r = {
                t:type,
                p:rule.find(".node-input-rule-property-name").typedInput('value'),
                pt:rule.find(".node-input-rule-property-name").typedInput('type')
            };
            if (type === "set") {
                r.to = rule.find(".node-input-rule-property-value").typedInput('value');
                r.tot = rule.find(".node-input-rule-property-value").typedInput('type');
            } else if (type === "move") {
                r.to = rule.find(".node-input-rule-property-move-value").typedInput('value');
                r.tot = rule.find(".node-input-rule-property-move-value").typedInput('type');
            } else if (type === "change") {
                r.from = rule.find(".node-input-rule-property-search-value").typedInput('value');
                r.fromt = rule.find(".node-input-rule-property-search-value").typedInput('type');
                r.to = rule.find(".node-input-rule-property-replace-value").typedInput('value');
                r.tot = rule.find(".node-input-rule-property-replace-value").typedInput('type');
            }
            node.rules.push(r);
        });
    },
    oneditresize: function(size) {
        var rows = $("#dialog-form>div:not(.node-input-rule-container-row)");
        var height = size.height;
        for (var i=0; i<rows.length; i++) {
            height -= $(rows[i]).outerHeight(true);
        }
        var editorRow = $("#dialog-form>div.node-input-rule-container-row");
        height -= (parseInt(editorRow.css("marginTop"))+parseInt(editorRow.css("marginBottom")));

        $("#node-input-rule-container").editableList('height',height);
    }
});
</script>

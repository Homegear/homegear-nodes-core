<script type="text/x-homegear">
{
    "name": "variable-switch",
    "readableName": "Variable switch",
    "version": "1.0.0",
    "coreNode": true,
    "maxThreadCount": 0
}
</script>
<!-- Source was modified from original by Sathya Laufer -->
<!--
  Copyright JS Foundation and other contributors, http://js.foundation

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<script type="text/x-red" data-template-name="variable-switch">
    <div class="form-row">
        <label for="node-input-name"><i class="fa fa-tag"></i> <span data-i18n="common.label.name"></span></label>
        <input type="text" id="node-input-name" data-i18n="[placeholder]common.label.name">
        <input type="hidden" id="node-input-outputs"/>
    </div>
    <div class="form-row">
        <label style="width: 130px;" for="node-input-variabletype"><i class="fa fa-random"></i> <span data-i18n="variable-switch.label.variabletype"></span></label>
        <select type="text" id="node-input-variabletype" style="display: inline-block; width: 65%;">
            <option value="device" data-i18n="variable-switch.label.devicevariable"></option>
            <option value="metadata" data-i18n="variable-switch.label.metadata"></option>
            <option value="system" data-i18n="variable-switch.label.systemvariable"></option>
            <option value="flow" data-i18n="variable-switch.label.flowvariable"></option>
            <option value="global" data-i18n="variable-switch.label.globalvariable"></option>
        </select>
    </div>
    <div id="node-input-family-container" class="form-row hide">
        <label style="width: 100px; margin-left: 20px; margin-right: 10px;" for="node-input-family"><i class="fa fa-id-badge"></i> <span data-i18n="variable-switch.label.family"></span></label>
        <select type="text" id="node-input-family" style="display: inline-block; width: 65%;">
        </select>
    </div>
    <div id="node-input-peerid-container" class="form-row hide">
        <label style="width: 100px; margin-left: 20px; margin-right: 10px;" for="node-input-peerid"><i class="fa fa-id-badge"></i> <span data-i18n="variable-switch.label.peerid"></span></label>
        <select type="text" id="node-input-peerid" style="display: inline-block; width: 65%;">
        </select>
    </div>
    <div id="node-input-channel-container" class="form-row hide">
        <label style="width: 100px; margin-left: 20px; margin-right: 10px;" for="node-input-channel"><i class="fa fa-list-ol"></i> <span data-i18n="variable-switch.label.channel"></span></label>
        <select type="text" id="node-input-channel" style="display: inline-block; width: 65%;">
        </select>
    </div>
    <div id="node-input-variable-container" class="hide">
        <div class="form-row">
            <label style="width: 100px; margin-left: 20px; margin-right: 10px;" for="node-input-variable"><i class="fa fa-tag"></i> <span data-i18n="variable-switch.label.variable"></span></label>
            <select type="text" id="node-input-variable" style="display: inline-block; width: 65%;">
            </select>
        </div>
        <div style="margin-left: 150px; font-size: 11px;" id="node-input-variableinfo" class="form-row">
        </div>
        <div class="form-row">
            <div id="node-create-variable" style="width: 100%; text-align: right; margin-right: 10px; cursor: pointer;"><a class="create-variable-dialog"><span data-i18n="variable-switch.label.createnewvariable"></span></a></div>
        </div>
    </div>
    <div class="form-row" id="changes-only">
        <label>&nbsp;</label>
        <input type="checkbox" id="node-input-changes-only" style="display: inline-block; width: auto; vertical-align: top;">
        <label for="node-input-changes-only" style="width: 70%;" data-i18n="variable-switch.label.changes-only"></label>
    </div>
    <div class="form-row">
        <label>&nbsp;</label>
        <input type="checkbox" id="node-input-output-true" style="display: inline-block; width: auto; vertical-align: top;">
        <label for="node-input-output-true" style="width: 70%;" data-i18n="variable-switch.label.output-true"></label>
    </div>
    <div class="form-row">
        <label>&nbsp;</label>
        <input type="checkbox" id="node-input-output-false" disabled style="display: inline-block; width: auto; vertical-align: top;">
        <label for="node-input-output-false" style="width: 70%;" data-i18n="variable-switch.label.output-false"></label>
    </div>
    <div class="form-row node-input-rule-container-row">
        <ol id="node-input-rule-container"></ol>
    </div>
    <div class="form-row">
        <select id="node-input-checkall" style="width:100%; margin-right:5px;">
            <option value="true" data-i18n="variable-switch.checkall"></option>
            <option value="false" data-i18n="variable-switch.stopfirst"></option>
        </select>
    </div>
</script>
<script type="text/javascript">
(function() {
    var operators = [
        {v:"eq",t:"=="},
        {v:"neq",t:"!="},
        {v:"lt",t:"<"},
        {v:"lte",t:"<="},
        {v:"gt",t:">"},
        {v:"gte",t:">="},
        {v:"btwn",t:"variable-switch.rules.btwn"},
        {v:"cont",t:"variable-switch.rules.cont"},
        {v:"regex",t:"variable-switch.rules.regex"},
        {v:"true",t:"variable-switch.rules.true"},
        {v:"false",t:"variable-switch.rules.false"},
        {v:"null",t:"variable-switch.rules.null"},
        {v:"nnull",t:"variable-switch.rules.nnull"},
        {v:"else",t:"variable-switch.rules.else"}
    ];

    function clipValueLength(v) {
        if (v.length > 15) {
            return v.substring(0,15)+"...";
        }
        return v;
    }
    function getValueLabel(t,v) {
        if (t === 'str') {
            return '"'+clipValueLength(v)+'"';
        } else if (t === 'msg' || t==='flow' || t==='global') {
            return t+"."+clipValueLength(v);
        }
        return clipValueLength(v);
    }
    RED.nodes.registerType('variable-switch', {
        color: "#E2D96E",
        category: 'logic',
        namespace: 'basic-logic',
        defaults: {
            name: {value:""},
            variabletype: {value: "device",required: true},
            family: {},
            peername: {value:"", required: false},
            peerid: {value:"0",validate: function(v) { if(this.variabletype != "device" && this.variabletype != "metadata") return true; else return $.isNumeric(v); }},
            channel: {value:"0",validate: function(v) { if(this.variabletype != "device") return true; else return $.isNumeric(v); }},
            variable: {value:"",validate: function(v) { if(this.variabletype != "device") return true; else return v != ""; }},
            "changes-only": {value:false},
            "output-true": {value:false},
            "output-false": {value:false},
            rules: {value:[{t:"eq", v:""}]},
            checkall: {value:"true", required:true},
            inputs: {value:1},
            outputs: {value:1}
        },
        inputs: 1,
        outputs: 1,
        icon: "switch.png",
        label: function() {
            if(this.name) return this.name;
            if(this.variabletype == "device" && this.variable) return !this.peername ? this.peerid + ", " + this.channel + ", " + this.variable : this.peername + " | " + this.peerid + ", " + this.channel + ", " + this.variable;
            else if(this.variabletype == "metadata" && this.variable) return !this.peername ? this.peerid + ", " + this.variable : this.peername + " | " + this.peerid + ", " + this.channel + ", " + this.variable;
            else if(this.variabletype == "flow" && this.variable) return "flow." + this.variable;
            else if(this.variabletype == "global" && this.variable) return "global." + this.variable;
            else if(this.variable) return this.variable;
            return "variable-switch";
        },
        oneditprepare: function() {
            var node = this;
            var devices = {};
            var currentDevice = {};
            var variables = {};
            var previousValueType = {value:"prev",label:this._("variable-switch.previous"),hasValue:false};
            var inputValueType = {value:"input",label:this._("variable-switch.input"),hasValue:false};
            var flowValueType = {value:"flow",label:this._("variable-switch.flow"),hasValue:true};
            var globalValueType = {value:"global",label:this._("variable-switch.global"),hasValue:true};

            var outputCount = $("#node-input-outputs").val("{}");

            if(this['output-true']) $("#node-input-output-false").attr('disabled', false);
            $("#node-input-output-true").on('click', function() {
                if(this.checked) $("#node-input-output-false").attr('disabled', false);
                else $("#node-input-output-false").attr('disabled', true);
            });

            var andLabel = this._("variable-switch.and");
            var caseLabel = this._("variable-switch.ignorecase");

            function resizeRule(rule) {
                var newWidth = rule.width();
                var selectField = rule.find("select");
                var type = selectField.val()||"";
                var valueField = rule.find(".node-input-rule-value");
                var btwnField1 = rule.find(".node-input-rule-btwn-value");
                var btwnField2 = rule.find(".node-input-rule-btwn-value2");
                var selectWidth;
                if (type.length < 4) {
                    selectWidth = 60;
                } else if (type === "regex") {
                    selectWidth = 147;
                } else {
                    selectWidth = 120;
                }
                selectField.width(selectWidth);
                if (type === "btwn") {
                    btwnField1.typedInput("width",(newWidth-selectWidth-70));
                    btwnField2.typedInput("width",(newWidth-selectWidth-70));
                } else {
                    if (type === "true" || type === "false" || type === "null" || type === "nnull" || type === "else") {
                        // valueField.hide();
                    } else {
                        valueField.typedInput("width",(newWidth-selectWidth-70));
                    }
                }
            }

            $("#node-input-rule-container").css('min-height','250px').css('min-width','450px').editableList({
                addItem: function(container,i,opt) {
                    if (!opt.hasOwnProperty('r')) {
                        opt.r = {};
                    }
                    var rule = opt.r;
                    if (!rule.hasOwnProperty('t')) {
                        rule.t = 'eq';
                    }
                    if (!opt.hasOwnProperty('i')) {
                        opt._i = Math.floor((0x99999-0x10000)*Math.random()).toString(16)
                    }
                    var row = $('<div/>').appendTo(container);
                    var row2 = $('<div/>',{style:"padding-top: 5px; padding-left: 175px;"}).appendTo(container);
                    var row3 = $('<div/>',{style:"padding-top: 5px; padding-left: 102px;"}).appendTo(container);
                    var selectField = $('<select/>',{style:"width:120px; margin-left: 5px; text-align: center;"}).appendTo(row);
                    for (var d in operators) {
                        selectField.append($("<option></option>").val(operators[d].v).text(/^variable-switch/.test(operators[d].t)?node._(operators[d].t):operators[d].t));
                    }
                    var valueField = $('<input/>',{class:"node-input-rule-value",type:"text",style:"margin-left: 5px;"}).appendTo(row).typedInput({default:'string',types:['bool','int','float','string','array','struct',previousValueType,inputValueType,flowValueType,globalValueType]});
                    var btwnValueField = $('<input/>',{class:"node-input-rule-btwn-value",type:"text",style:"margin-left: 5px;"}).appendTo(row).typedInput({default:'int',types:['int','float',previousValueType,inputValueType,flowValueType,globalValueType]});
                    var btwnAndLabel = $('<span/>',{class:"node-input-rule-btwn-label"}).text(" "+andLabel+" ").appendTo(row3);
                    var btwnValue2Field = $('<input/>',{class:"node-input-rule-btwn-value2",type:"text",style:"margin-left:2px;"}).appendTo(row3).typedInput({default:'int',types:['int','float',previousValueType,inputValueType,flowValueType,globalValueType]});
                    var finalspan = $('<span/>',{style:"float: right;margin-top: 6px;"}).appendTo(row);
                    finalspan.append(' &#8594; <span class="node-input-rule-index">'+i+'</span> ');
                    var caseSensitive = $('<input/>',{id:"node-input-rule-case-"+i,class:"node-input-rule-case",type:"checkbox",style:"width:auto;vertical-align:top"}).appendTo(row2);
                    $('<label/>',{for:"node-input-rule-case-"+i,style:"margin-left: 3px;"}).text(caseLabel).appendTo(row2);
                    selectField.change(function() {
                        resizeRule(container);
                        var type = selectField.val();
                        if (type === "btwn") {
                            valueField.typedInput('hide');
                            btwnValueField.typedInput('show');
                        } else {
                            btwnValueField.typedInput('hide');
                            if (type === "true" || type === "false" || type === "null" || type === "nnull" || type === "else") {
                                valueField.typedInput('hide');
                            } else {
                                valueField.typedInput('show');
                            }
                        }
                        if (type === "regex") {
                            row2.show();
                            row3.hide();
                        } else if (type === "btwn"){
                            row2.hide();
                            row3.show();
                        } else {
                            row2.hide();
                            row3.hide();
                        }
                    });
                    selectField.val(rule.t);
                    if (rule.t == "btwn") {
                        btwnValueField.typedInput('value',rule.v);
                        btwnValueField.typedInput('type',rule.vt||'num');
                        btwnValue2Field.typedInput('value',rule.v2);
                        btwnValue2Field.typedInput('type',rule.v2t||'num');
                    } else if (typeof rule.v != "undefined") {
                        valueField.typedInput('value',rule.v);
                        valueField.typedInput('type',rule.vt||'str');
                    }
                    if (rule.case) {
                        caseSensitive.prop('checked',true);
                    } else {
                        caseSensitive.prop('checked',false);
                    }
                    selectField.change();

                    var currentOutputs = JSON.parse(outputCount.val()||"{}");
                    currentOutputs[opt.hasOwnProperty('i')?opt.i:opt._i] = i;
                    outputCount.val(JSON.stringify(currentOutputs));
                },
                removeItem: function(opt) {
                    var currentOutputs = JSON.parse(outputCount.val()||"{}");
                    if (opt.hasOwnProperty('i')) {
                        currentOutputs[opt.i] = -1;
                    } else {
                        delete currentOutputs[opt._i];
                    }
                    var rules = $("#node-input-rule-container").editableList('items');
                    rules.each(function(i) {
                        $(this).find(".node-input-rule-index").html(i);
                        var data = $(this).data('data');
                        currentOutputs[data.hasOwnProperty('i')?data.i:data._i] = i;
                    });
                    outputCount.val(JSON.stringify(currentOutputs));
                },
                resizeItem: resizeRule,
                sortItems: function(rules) {
                    var currentOutputs = JSON.parse(outputCount.val()||"{}");
                    var rules = $("#node-input-rule-container").editableList('items');
                    rules.each(function(i) {
                        $(this).find(".node-input-rule-index").html(i);
                        var data = $(this).data('data');
                        currentOutputs[data.hasOwnProperty('i')?data.i:data._i] = i;
                    });
                    outputCount.val(JSON.stringify(currentOutputs));
                },
                sortable: true,
                removable: true
            });

            for (var i=0;i<this.rules.length;i++) {
                var rule = this.rules[i];
                $("#node-input-rule-container").editableList('addItem',{r:rule,i:i});
            }

            function getVariableType(variable)
            {
                var type = jQuery.type(variable);
                if(type == "boolean") return "BOOL";
                else if(type == "number") {
                    if(variable % 1 === 0) return "INTEGER";
                    else return "FLOAT";
                } else if(type == "string") return "STRING";
                else if(type == "array") return "ARRAY";
                else return "STRUCT";
            }

            function updateVariableValue() {
                var variableType = $("#node-input-variabletype").val();
                var currentVariable = $("#node-input-variable").val();
                if(!currentVariable) return;
                if(variableType == "flow") {
                    RED.comms.homegear().invoke("getFlowData", function(message) {
                        if(!message.hasOwnProperty("result")) return;
                        var text = $('<div/>').text(JSON.stringify(message.result)).html();
                        if(text.length > 40) text = text.substring(0, 40) + "...";
                        $("#node-variable-value-cell").text(text);
                    }, node.z, currentVariable);
                } else if(variableType == "global") {
                    RED.comms.homegear().invoke("getGlobalData", function(message) {
                        if(!message.hasOwnProperty("result")) return;
                        var text = $('<div/>').text(JSON.stringify(message.result)).html();
                        if(text.length > 40) text = text.substring(0, 40) + "...";
                        $("#node-variable-value-cell").text(text);
                    }, currentVariable);
                } else {
                    var currentPeerId = 0;
                    var currentChannel = -1;
                    if(variableType == "metadata" || variableType == "device") {
                        currentPeerId = parseInt($("#node-input-peerid").val());
                        if(currentPeerId == 0) return;
                    }
                    if(variableType == "device") currentChannel = parseInt($("#node-input-channel").val());
                    RED.comms.homegear().invoke("getValue", function(message) {
                        if(!message.hasOwnProperty("result")) return;
                        var text = $('<div/>').text(JSON.stringify(message.result)).html();
                        if(text.length > 40) text = text.substring(0, 40) + "...";
                        $("#node-variable-value-cell").text(text);
                    }, currentPeerId, currentChannel, currentVariable);
                }
            }

            function updateVariableInfo() {
                var currentVariable = variables[$("#node-input-variable").val()];
                if(!currentVariable) {
                    $("#node-input-variableinfo").text("");
                    return;
                }
                if($("#node-input-variable").val()) {
                    var html = "<table>";
                    if(currentVariable.label) html += "<tr><td><b>Label</b></td><td>" + currentVariable.label + "</td></tr>";
                    if(currentVariable.description) html += "<tr><td><b>Description</b></td><td>" + currentVariable.description + "</td></tr>";
                    html += "<tr><td><b>Type</b></td><td>" + currentVariable.type + "</td></tr>";
                    if(currentVariable.min || currentVariable.min === 0) html += "<tr><td><b>Min</b></td><td>" + currentVariable.min + "</td></tr>";
                    if(currentVariable.max || currentVariable.min === 0) html += "<tr><td><b>Max</b></td><td>" + currentVariable.max + "</td></tr>";
                    if(currentVariable.unit) html += "<tr><td><b>Unit</b></td><td>" + currentVariable.unit + "</td></tr>";
                    if(currentVariable.special) {
                        html += "<tr><td><b>Special</b></td><td>";
                        var firstElement = true;
                        $.each(currentVariable.special, function() {
                            if(!this.ID || (!this.VALUE && this.VALUE !== 0)) return;
                            html += (firstElement ? "" : ", ") + this.ID + ": " + this.VALUE;
                            firstElement = false;
                        });
                        html += "</td></tr>";
                    }
                    if(currentVariable.valueList) {
                        html += "<tr><td><b>Values</b></td><td>";
                        var firstElement = true;
                        $.each(currentVariable.valueList, function(index, value) {
                            if(!value && value !== 0) return;
                            html += (firstElement ? "" : ", ") + (currentVariable.min + index) + ": " + value;
                            firstElement = false;
                        });
                        html += "</td></tr>";
                    }
                    html += "<tr><td><b>Value</b></td><td id=\"node-variable-value-cell\"></td></tr>"
                    html += "</table>";
                    $("#node-input-variableinfo").html(html);
                    updateVariableValue();
                }
            }

            //{{{ System variables
                function updateSystemVariableOptions() {
                    var variableSelect = $("#node-input-variable");
                    variableSelect.empty();
                    variables = {};
                    RED.comms.homegear().invoke("getAllSystemVariables", function(message) {
                        if(!message.result) return;
                        $.each(message.result, function(name, value) {
                            if(!name) return;
                            variables[name] = {};
                            variables[name].id = name;
                            variables[name].type = getVariableType(value);
                            variableSelect.append($("<option />").val(name).text(name));
                        });
                        variableSelect.val(node.variable);
                        updateVariableInfo();
                    });
                }
            //}}}

            //{{{ Flow variables
                function updateFlowVariableOptions() {
                    var variableSelect = $("#node-input-variable");
                    variableSelect.empty();
                    variables = {};
                    RED.comms.homegear().invoke("getFlowData", function(message) {
                        if(!message.result) return;
                        $.each(message.result, function(name, value) {
                            if(!name) return;
                            variables[name] = {};
                            variables[name].id = name;
                            variables[name].type = getVariableType(value);
                            variableSelect.append($("<option />").val(name).text(name));
                        });
                        variableSelect.val(node.variable);
                        updateVariableInfo();
                    }, node.z);
                }
            //}}}

            //{{{ Global variables
                function updateGlobalVariableOptions() {
                    var variableSelect = $("#node-input-variable");
                    variableSelect.empty();
                    variables = {};
                    RED.comms.homegear().invoke("getGlobalData", function(message) {
                        if(!message.result) return;
                        $.each(message.result, function(name, value) {
                            if(!name) return;
                            variables[name] = {};
                            variables[name].id = name;
                            variables[name].type = getVariableType(value);
                            variableSelect.append($("<option />").val(name).text(name));
                        });
                        variableSelect.val(node.variable);
                        updateVariableInfo();
                    });
                }
            //}}}

            //{{{ Metadata
                function updateMetadataVariableOptions() {
                    var currentPeerId = parseInt($("#node-input-peerid").val());
                    var variableSelect = $("#node-input-variable");
                    variableSelect.empty();
                    variables = {};
                    RED.comms.homegear().invoke("getAllMetadata", function(message) {
                        if(!message.result) return;
                        $.each(message.result, function(name, value) {
                            if(!name) return;
                            variables[name] = {};
                            variables[name].id = name;
                            variables[name].type = getVariableType(value);
                            variableSelect.append($("<option />").val(name).text(name));
                        });
                        variableSelect.val(node.variable);
                        updateVariableInfo();
                    }, currentPeerId);
                }
            //}}}

            //{{{ Variable type
                function updateVariableTypeOptions() {
                    var variableType = $("#node-input-variabletype").val();
                    if (variableType == "device") {
                        $("#node-input-family-container").show();
                        $("#node-input-peerid-container").show();
                        $("#node-input-channel-container").show();
                        $("#node-input-variable-container").show();
                        $("#node-input-eventsource-container").show();
                        $("#node-create-variable").hide();
                        updateChannelOptions();
                    } else if(variableType == "metadata") {
                        $("#node-input-family-container").show();
                        $("#node-input-peerid-container").show();
                        $("#node-input-channel-container").hide();
                        $("#node-input-variable-container").show();
                        $("#node-input-eventsource-container").hide();
                        $("#node-create-variable").show();
                        updateMetadataVariableOptions();
                    } else {
                        $("#node-input-family-container").hide();
                        $("#node-input-peerid-container").hide();
                        $("#node-input-channel-container").hide();
                        $("#node-input-variable-container").show();
                        $("#node-input-eventsource-container").hide();
                        $("#node-create-variable").show();
                        if(variableType == "system") updateSystemVariableOptions();
                        else if(variableType == "flow") updateFlowVariableOptions();
                        else if(variableType == "global") updateGlobalVariableOptions();
                    }
                }

                updateVariableTypeOptions();
                $("#node-input-variabletype").on("change",function() {
                    updateVariableTypeOptions();
                });
            //}}}

            //{{{ Families
                RED.comms.homegear().invoke("listFamilies", function(message) {
                    var familySelect = $("#node-input-family");
                    $.each(message.result, function() {
                        familySelect.append($("<option />").val(this.ID).text(this.NAME));
                    });
                    familySelect.val(node.family);
                });
            //}}}

            //{{{ Variables
                function updateVariableOptions() {
                    var currentPeerId = parseInt($("#node-input-peerid").val());
                    var currentChannel = parseInt($("#node-input-channel").val());
                    var variableSelect = $("#node-input-variable");
                    variableSelect.empty();
                    if(currentPeerId != 0 && (currentChannel === 0 || currentChannel >= 1)) {
                        variables = {};
                        RED.comms.homegear().invoke("getParamsetDescription", function(message) {
                            if(!message.result) return;
                            var parameters = message.result;
                            $.each(parameters, function() {
                                if(!this.ID) return;
                                variables[this.ID] = {};
                                variables[this.ID].id = this.ID;
                                variables[this.ID].type = this.TYPE;
                                variables[this.ID].unit = this.UNIT;
                                if(this.TYPE != "BOOL" && this.TYPE != "ACTION") variables[this.ID].min = this.MIN;
                                if(this.TYPE != "BOOL" && this.TYPE != "ACTION") variables[this.ID].max = this.MAX;
                                if(this.SPECIAL) variables[this.ID].special = this.SPECIAL;
                                if(this.VALUE_LIST) variables[this.ID].valueList = this.VALUE_LIST;
                                if(this.LABEL) variables[this.ID].label = this.LABEL;
                                if(this.DESCRIPTION) variables[this.ID].label = this.DESCRIPTION;
                                variableSelect.append($("<option />").val(this.ID).text(this.ID));
                            });
                            variableSelect.val(node.variable);
                            updateVariableInfo();
                        }, currentPeerId, currentChannel, "VALUES");
                    }
                }

                $("#node-input-channel").on("change",function() {
                    updateVariableOptions();
                    updateName();
                });

                $("#node-input-variable").on("change",function() {
                    updateVariableInfo();
                });
            //}}}

            //{{{ Channels
                function updateName() {
                    node.peername = null;
                    var currentPeerId = parseInt($("#node-input-peerid").val());
                    var currentChannel = parseInt($("#node-input-channel").val());
                    if(currentPeerId != 0 && (currentChannel === 0 || currentChannel >= 1)) {
                        RED.comms.homegear().invoke("getName", function(message) {
                            if(message.result !== "") {
                                node.peername = message.result;
                            } else {
                                RED.comms.homegear().invoke("getName", function(message) {
                                    if(message.result !== "") node.peername = message.result;
                                }, currentPeerId);
                            }
                        }, currentPeerId, currentChannel);
                    }
                }

                function updateChannelOptions() {
                    var currentPeerId = parseInt($("#node-input-peerid").val());
                    var channelSelect = $("#node-input-channel");
                    channelSelect.empty();
                    $("#node-input-variable").empty();
                    if(currentPeerId) {
                        currentDevice = {};
                        RED.comms.homegear().invoke("getDeviceDescription", function(message) {
                            if(!message.result) return;
                            var channels = message.result.CHANNELS;
                            var channelCount = channels.length;
                            $.each(channels, function() {
                                RED.comms.homegear().invoke("getDeviceDescription", function(message) {
                                    channelCount--;
                                    if(message.result && typeof message.result.CHANNEL == "number" && message.result.PARAMSETS && message.result.PARAMSETS.indexOf("VALUES") !== -1) {
                                        currentDevice[message.result.CHANNEL] = {};
                                        currentDevice[message.result.CHANNEL].channel = message.result.CHANNEL;
                                        currentDevice[message.result.CHANNEL].type = (message.result.NAME ? message.result.NAME : (message.result.TYPE ? message.result.TYPE : ""));
                                    }
                                    if(!channelCount)
                                    {
                                        $.each(currentDevice, function() {
                                            channelSelect.append($("<option />").val(this.channel).text(this.channel + (this.type ? " (" + this.type + ")" : "")));
                                        });
                                        channelSelect.val(node.channel);
                                        if(channelSelect.val()) channelSelect.removeClass("input-error");
                                        updateVariableOptions();
                                        updateName();
                                    }
                                }, currentPeerId, this);
                            });
                        }, currentPeerId, -1);
                    }
                }

                $("#node-input-peerid").on("change",function() {
                    var variableType = $("#node-input-variabletype").val();
                    if (variableType == "device") {
                        updateChannelOptions();
                    } else if(variableType == "metadata") {
                        updateMetadataVariableOptions();
                    }
                });
            //}}}

            //{{{ Peers
                function fillPeerIdOptions() {
                    $("#node-input-peerid").empty();
                    $("#node-input-channel").empty();
                    $("#node-input-variable").empty();
                    var variableType = $("#node-input-variabletype").val();
                    var currentFamily = $("#node-input-family").val();
                    var peerSelect = $("#node-input-peerid");
                    $.each(devices, function() {
                       if(this.family == currentFamily) peerSelect.append($("<option />").val(this.id).text(this.id + (this.name ? " (" + this.name + ")" : (this.type ? " (" + this.type + ")" : "")))); 
                    });
                    peerSelect.val(node.peerid);
                    if(peerSelect.val()) peerSelect.removeClass("input-error");
                    if (variableType == "device") {
                        updateChannelOptions();
                    } else if(variableType == "metadata") {
                        updateMetadataVariableOptions();
                    }
                }

                RED.comms.homegear().invoke("listDevices", function(message) {
                    var familySelect = $("#node-input-family");
                    $.each(message.result, function() {
                        devices[this.ID] = {};
                        devices[this.ID].id = this.ID;
                        devices[this.ID].family = this.FAMILY;
                        devices[this.ID].type = this.TYPE;
                        devices[this.ID].name = this.NAME;
                    });
                    fillPeerIdOptions();
                }, false, ["ID", "FAMILY", "TYPE", "NAME"]);

                $("#node-input-family").on("change",function() {
                    fillPeerIdOptions();
                });
            //}}}

            //{{{ Create variable dialog
                $("#node-create-variable").on("click", function() {
                    var variableType = $("#node-input-variabletype").val();
                    var peerId = parseInt($("#node-input-peerid").val());

                    if(variableType == "metadata" && !peerId) return;

                    var createVariableDialog = $('<div id="create-variable-dialog" class="hide node-red-dialog"><div class="fixed-input"><p>Please enter the name and the initial value of the variable. The type of the value is deduced using the JSON type rules.</p><form><label id="create-variable-dialog-label-name"></label><input type="text" id="create-variable-name" style="width:100%"/><label id="create-variable-dialog-label-type"></label><input type="text" id="create-variable-value" style="width:100%"/></form></div></div>')
                        .appendTo("body")
                        .dialog({
                            modal: true,
                            autoOpen: false,
                            width: 400,
                            resizable: false,
                            buttons: [
                                {
                                    id: "create-variable-dialog-cancel",
                                    class: "primary",
                                    text: RED._("common.label.cancel"),
                                    click: function() {
                                        $( this ).dialog( "close" );
                                    }
                                },
                                {
                                    id: "create-variable-dialog-set",
                                    class: "primary",
                                    text: RED._("basic-logic/variable-switch.hni:variable-switch.label.create"),
                                    click: function() {
                                        var variableName = $("#create-variable-name").val().trim();
                                        var variableValue = $("#create-variable-value").val().trim();
                                        if(!variableName | !variableValue) return false;
                                        try {
                                            variableValue = JSON.parse('[' + variableValue + ']')[0];
                                        } catch(e) {
                                            return false;
                                        }
                                        if(variableType == "system") RED.comms.homegear().invoke("setSystemVariable", null, variableName, variableValue);
                                        else if(variableType == "metadata") {
                                            if(peerId == 0) return false;
                                            RED.comms.homegear().invoke("setMetadata", null, peerId, variableName, variableValue);
                                        } else if(variableType == "flow") RED.comms.homegear().invoke("setFlowData", null, that.z, variableName, variableValue);
                                        else if(variableType == "global") RED.comms.homegear().invoke("setGlobalData", null, variableName, variableValue);

                                        that.variable = variableName;

                                        $( this ).dialog( "close" );
                                    }
                                }
                            ],
                            open: function(e) {
                                $(this).parent().find(".ui-dialog-titlebar-close").hide();

                                $("#create-variable-dialog-label-name").text(RED._("basic-logic/variable-switch.hni:variable-switch.label.name") + ":");
                                $("#create-variable-dialog-label-type").text(RED._("basic-logic/variable-switch.hni:variable-switch.label.typeandvalue") + ":");
                            },
                            close: function(e) {
                                $(this).remove();

                                if(variableType == "system") updateSystemVariableOptions();
                                else if(variableType == "metadata") updateMetadataVariableOptions();
                                else if(variableType == "flow") updateFlowVariableOptions();
                                else if(variableType == "global") updateGlobalVariableOptions();
                            }
                        });
                    createVariableDialog.dialog("option", "title", RED._("basic-logic/variable-switch.hni:variable-switch.label.createvariable")).dialog("open");
                });
            //}}}
        },
        oneditsave: function() {
            var rules = $("#node-input-rule-container").editableList('items');
            var ruleset;
            var node = this;
            node.rules = [];
            node.inputs = 1;
            rules.each(function(i) {
                var ruleData = $(this).data('data');
                var rule = $(this);
                var type = rule.find("select").val();
                var r = {t:type};
                if (!(type === "true" || type === "false" || type === "null" || type === "nnull" || type === "else")) {
                    if (type === "btwn") {
                        r.v = rule.find(".node-input-rule-btwn-value").typedInput('value');
                        r.vt = rule.find(".node-input-rule-btwn-value").typedInput('type');
                        r.v2 = rule.find(".node-input-rule-btwn-value2").typedInput('value');
                        r.v2t = rule.find(".node-input-rule-btwn-value2").typedInput('type');
                    } else {
                        r.v = rule.find(".node-input-rule-value").typedInput('value');
                        r.vt = rule.find(".node-input-rule-value").typedInput('type');
                    }
                    if (type === "regex") {
                        r.case = rule.find(".node-input-rule-case").prop("checked");
                    }
                }
                node.rules.push(r);
            });
        },
        oneditresize: function(size) {
            var rows = $("#dialog-form>div:not(.node-input-rule-container-row)");
            var height = size.height;
            for (var i=0;i<rows.size();i++) {
                height -= $(rows[i]).outerHeight(true);
            }
            var editorRow = $("#dialog-form>div.node-input-rule-container-row");
            height -= (parseInt(editorRow.css("marginTop"))+parseInt(editorRow.css("marginBottom")));
            $("#node-input-rule-container").editableList('height',height);
        }
    });
})();
</script>

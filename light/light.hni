<script type="text/x-red" data-template-name="light">
    <div class="form-row">
        <label style="width: 110px;" for="node-input-name"><i class="fa fa-tag"></i> <span data-i18n="light.label.name"></span></label>
        <input style="width: 65%;" type="text" id="node-input-name" data-i18n="[placeholder]light.label.name">
    </div>
    <div class="form-row">
        <label style="width: 110px;" for="node-input-lighttype"><i class="fa fa-random"></i> <span data-i18n="light.label.lighttype"></span></label>
        <select type="text" id="node-input-lighttype" class="node-input-select2-nosearch" style="display: inline-block; width: 65%;">
        </select>
    </div>
    <div id="node-input-twoinputs-container" class="form-row hide">
        <label>&nbsp;</label>
        <input type="checkbox" id="node-input-twoinputs" style="display: inline-block; width: auto; vertical-align: top;">        
        <label for="node-input-twoinputs" style="width: 65%" data-i18n="light.label.twoinputs"></label>
    </div>
    <div id="node-input-fbinput-container" class="form-row hide">
		<label>&nbsp;</label>
		<input type="checkbox" id="node-input-fbinput" style="display: inline-block; width: auto; vertical-align: top;">
		<label for="node-input-fbinput" style="width: 65%" data-i18n="light.label.fbinput"></label>
	</div>
    <div id="node-input-dimmerstate" class="form-row hide">
        <div class="form-row">
            <label style="width: 80px; margin-left: 20px; margin-right: 10px;" for="node-input-offvalue"><span data-i18n="light.label.offvalue"></span></label>
            <input style="width: 65%;" type="text" id="node-input-offvalue">
        </div>
        <div class="form-row">
            <label style="width: 80px; margin-left: 20px; margin-right: 10px;" for="node-input-onvalue"><span data-i18n="light.label.onvalue"></span></label>
            <input style="width: 65%;" type="text" id="node-input-onvalue">
        </div>
    </div>
    <div id="node-input-dimmer" class="form-row hide">
        <div class="form-row">
            <label style="width: 80px; margin-left: 20px; margin-right: 10px;" for="node-input-offvalue2"><span data-i18n="light.label.offvalue"></span></label>
            <input style="width: 65%;" type="text" id="node-input-offvalue2">
        </div>
        <div class="form-row">
            <label style="width: 80px; margin-left: 20px; margin-right: 10px;" for="node-input-minvalue"><span data-i18n="light.label.minvalue"></span></label>
            <input style="width: 65%;" type="text" id="node-input-minvalue">
        </div>
        <div class="form-row">
            <label style="width: 80px; margin-left: 20px; margin-right: 10px;" for="node-input-maxvalue"><span data-i18n="light.label.maxvalue"></span></label>
            <input style="width: 65%;" type="text" id="node-input-maxvalue">
        </div>
        <div class="form-row">
            <label style="width: 80px; margin-left: 20px; margin-right: 10px;" for="node-input-step"><span data-i18n="light.label.step"></span></label>
            <input style="width: 65%;" type="text" id="node-input-step">
        </div>
        <div class="form-row">
            <label style="width: 80px; margin-left: 20px; margin-right: 10px;" for="node-input-factor"><span data-i18n="light.label.factor"></span></label>
            <input style="width: 65%;" type="text" id="node-input-factor">
        </div>
        <div class="form-row">
            <label style="width: 80px; margin-left: 20px; margin-right: 10px;" for="node-input-interval"><span data-i18n="light.label.interval"></span></label>
            <input style="width: 65%;" type="text" id="node-input-interval">
        </div>
        <div class="form-row">
            <input type="checkbox" id="node-input-onmaxvalue" style="display: inline-block; width: auto; vertical-align: top; margin-left: 30px; margin-right: 5px;">
            <label for="node-input-onmaxvalue" style="width: auto" data-i18n="light.label.onmaxvalue"></label>
        </div>
    </div>
    <div class="form-row">
        <label style="width: 110px;" for="node-input-variabletype"><i class="fa fa-random"></i> <span data-i18n="light.label.variabletype"></span></label>
        <select type="text" id="node-input-variabletype" class="node-input-select2-nosearch" style="display: inline-block; width: 65%;">
        </select>
    </div>
    <div id="node-input-family-container" class="form-row hide">
        <label style="width: 80px; margin-left: 20px; margin-right: 10px;" for="node-input-family"><i class="fa fa-id-badge"></i> <span data-i18n="light.label.family"></span></label>
        <select type="text" id="node-input-family" class="node-input-select2" style="display: inline-block; width: 65%;">
        </select>
    </div>
    <div id="node-input-peerid-container" class="form-row hide">
        <label style="width: 80px; margin-left: 20px; margin-right: 10px;" for="node-input-peerid"><i class="fa fa-id-badge"></i> <span data-i18n="light.label.peerid"></span></label>
        <select type="text" id="node-input-peerid" class="node-input-select2" style="display: inline-block; width: 65%;">
        </select>
    </div>
    <div id="node-input-channel-container" class="form-row hide">
        <label style="width: 80px; margin-left: 20px; margin-right: 10px;" for="node-input-channel"><i class="fa fa-list-ol"></i> <span data-i18n="light.label.channel"></span></label>
        <select type="text" id="node-input-channel" class="node-input-select2" style="display: inline-block; width: 65%;">
        </select>
    </div>
    <div id="node-input-variable-container" clsee="hide">
        <div class="form-row">
            <label style="width: 80px; margin-left: 20px; margin-right: 10px;" for="node-input-variable"><i class="fa fa-tag"></i> <span data-i18n="light.label.variable"></span></label>
            <select type="text" id="node-input-variable" class="node-input-select2" style="display: inline-block; width: 65%;">
            </select>
        </div>
        <div style="margin-left: 150px; font-size: 11px;" id="node-input-variableinfo" class="form-row">
        </div>
    </div>
</script>
<script type="text/javascript">
    RED.nodes.registerType('light',{
        category: 'homegear',
        color:"#a6bbcf",
        defaults: {
            variabletype: {value: "device",required:true},
            family: {},
            peername: {value:"", required: false},
            peerid: {value:"0",validate: function(v) { if(this.variabletype == "system") return true; else return $.isNumeric(v); }},
            channel: {value:"0",validate: function(v) { if(this.variabletype != "device") return true; else return $.isNumeric(v); }},
            variable: {value:"",validate: function(v) { return v != ""; }},
            
            lighttype: {value:"switch"},
            offvalue: {value:"0",validate: function(v) { if(this.lighttype == "switch" || this.lighttype == "dimmer") return true; else return $.isNumeric(v); }},
            onvalue: {value:"100",validate: function(v) { if(this.lighttype == "switch" || this.lighttype == "dimmer") return true; else return $.isNumeric(v); }},
            offvalue2: {value:"0",validate: function(v) { if(this.lighttype == "switch" || this.lighttype == "dimmerstate") return true; else return $.isNumeric(v); }},
            minvalue: {value:"15",validate: function(v) { if(this.lighttype == "switch" || this.lighttype == "dimmerstate") return true; else return $.isNumeric(v); }},
            maxvalue: {value:"100",validate: function(v) { if(this.lighttype == "switch" || this.lighttype == "dimmerstate") return true; else return $.isNumeric(v); }},
            step: {value:"1",validate: function(v) { if(this.lighttype == "switch" || this.lighttype == "dimmerstate") return true; else return $.isNumeric(v); }},
            factor: {value:"0.03",validate: function(v) { if(this.lighttype == "switch" || this.lighttype == "dimmerstate") return true; else return $.isNumeric(v); }},
            interval: {value:"100",validate: function(v) { if(this.lighttype == "switch" || this.lighttype == "dimmerstate") return true; else return $.isNumeric(v); }},
            twoinputs: {value:false},
            onmaxvalue: {value:true},
            inputs: {value:1},
            name: {value:""}
        },
        inputs:1,
        inputInfo: function(i) {
        	if(this.lighttype == "dimmer") {
        		if (i == 0) return "State";
        		else if (i == 1) return "Up";
        		else if (i == 2) return "Down";
        		else if (i == 3) return "Feedback";
                else return "";
        	}
        	else if(this.twoinputs) {
        		if (i == 0) return "On";
        		else return "Off";
        	}
        	else return "State";
		},
        outputs:0,
        icon: "light.svg",
        align: "right",
        label: function() {
            if(this.name) return this.name;
            if(this.variabletype == "device" && this.variable) return !this.peername ? this.peerid + ", " + this.channel + ", " + this.variable : this.peername + " | " + this.peerid + ", " + this.channel + ", " + this.variable;
            else if(this.variabletype == "metadata" && this.variable) return !this.peername ? this.peerid + ", " + this.variable : this.peername + " | " + this.peerid + ", " + this.channel + ", " + this.variable;
            else if(this.variabletype == "system" && this.variable) return this.variable;
            return "light";
        },
        oneditprepare: function() {
            var node = this;
            var devices = {};
            var currentDevice = {};
            var variables = {};

            //{{{ Fill light type - this needs to be done here so the label is loaded before initializing select2.
            var lightTypeSelect = $("#node-input-lighttype");
            lightTypeSelect.append($("<option />").val("switch").text(RED._("light/light:light.label.switch")));
            lightTypeSelect.append($("<option />").val("dimmerstate").text(RED._("light/light:light.label.dimmerstate")));
            lightTypeSelect.append($("<option />").val("dimmer").text(RED._("light/light:light.label.dimmer")));
            lightTypeSelect.val(node.lighttype);
            //}}}

            //{{{ Fill variable types - this needs to be done here so the label is loaded before initializing select2.
            var variableTypeSelect = $("#node-input-variabletype");
            variableTypeSelect.append($("<option />").val("device").text(RED._("light/light:light.label.devicevariable")));
            variableTypeSelect.append($("<option />").val("metadata").text(RED._("light/light:light.label.metadata")));
            variableTypeSelect.append($("<option />").val("system").text(RED._("light/light:light.label.systemvariable")));
            variableTypeSelect.val(node.variabletype);
            //}}}

            //Initialize select2
            $('.node-input-select2').select2();
            $('.node-input-select2-nosearch').select2({minimumResultsForSearch: Infinity});

            function getVariableType(variable)
            {
                var type = jQuery.type(variable);
                if(type == "boolean") return "BOOL";
                else if(type == "number") {
                    if(variable % 1 === 0) return "NUMBER";
                    else return "FLOAT";
                } else if(type == "string") return "STRING";
                else if(type == "array") return "ARRAY";
                else return "STRUCT";
            }

            function updateVariableInfo() {
                var currentVariable = variables[$("#node-input-variable").val()];
                if(!currentVariable) {
                    $("#node-input-variableinfo").text("");
                    return;
                }
                if($("#node-input-variable").val()) {
                    var html = "<table>";
                    if(currentVariable.label) html += "<tr><td><b>Label</b></td><td>" + currentVariable.label + "</td></tr>";
                    if(currentVariable.description) html += "<tr><td><b>Description</b></td><td>" + currentVariable.description + "</td></tr>";
                    html += "<tr><td><b>Type</b></td><td>" + currentVariable.type + "</td></tr>";
                    if(currentVariable.min || currentVariable.min === 0) html += "<tr><td><b>Min</b></td><td>" + currentVariable.min + "</td></tr>";
                    if(currentVariable.max || currentVariable.min === 0) html += "<tr><td><b>Max</b></td><td>" + currentVariable.max + "</td></tr>";
                    if(currentVariable.unit) html += "<tr><td><b>Unit</b></td><td>" + currentVariable.unit + "</td></tr>";
                    if(currentVariable.special) {
                        html += "<tr><td><b>Special</b></td><td>";
                        var firstElement = true;
                        $.each(currentVariable.special, function() {
                            if(!this.ID || (!this.VALUE && this.VALUE !== 0)) return;
                            html += (firstElement ? "" : ", ") + this.ID + ": " + this.VALUE;
                            firstElement = false;
                        });
                        html += "</td></tr>";
                    }
                    if(currentVariable.valueList) {
                        html += "<tr><td><b>Values</b></td><td>";
                        var firstElement = true;
                        $.each(currentVariable.valueList, function(index, value) {
                            if(!value && value !== 0) return;
                            html += (firstElement ? "" : ", ") + (currentVariable.min + index) + ": " + value;
                            firstElement = false;
                        });
                        html += "</td></tr>";
                    }
                    html += "</table>";
                    $("#node-input-variableinfo").html(html);
                }
            }

            //{{{ System variables
                function updateSystemVariableOptions() {
                    var variableSelect = $("#node-input-variable");
                    variableSelect.empty();
                    variables = {};
                    RED.comms.homegear().invoke("getAllSystemVariables", function(message) {
                        if(!message.result) return;
                        $.each(message.result, function(name, value) {
                            if(!name) return;
                            variables[name] = {};
                            variables[name].id = name;
                            variables[name].type = getVariableType(value);
                            variableSelect.append($("<option />").val(name).text(name));
                        });
                        variableSelect.val(node.variable);
                        updateVariableInfo();
                    });
                }
            //}}}

            //{{{ Metadata
                function updateMetadataVariableOptions() {
                    var currentPeerId = parseInt($("#node-input-peerid").val());
                    var variableSelect = $("#node-input-variable");
                    variableSelect.empty();
                    variables = {};
                    RED.comms.homegear().invoke("getAllMetadata", function(message) {
                        if(!message.result) return;
                        $.each(message.result, function(name, value) {
                            if(!name) return;
                            variables[name] = {};
                            variables[name].id = name;
                            variables[name].type = getVariableType(value);
                            variableSelect.append($("<option />").val(name).text(name));
                        });
                        variableSelect.val(node.variable);
                        updateVariableInfo();
                    }, currentPeerId);
                }
            //}}}

            //{{{ Variable type
                function updateVariableTypeOptions() {
                    var variableType = $("#node-input-variabletype").val();
                    if (variableType == "device") {
                        $("#node-input-family-container").show();
                        $("#node-input-peerid-container").show();
                        $("#node-input-channel-container").show();
                        $("#node-input-variable-container").show();
                        updateChannelOptions();
                    } else if(variableType == "metadata") {
                        $("#node-input-family-container").show();
                        $("#node-input-peerid-container").show();
                        $("#node-input-channel-container").hide();
                        $("#node-input-variable-container").show();
                        updateMetadataVariableOptions();
                    } else if(variableType == "system") {
                        $("#node-input-family-container").hide();
                        $("#node-input-peerid-container").hide();
                        $("#node-input-channel-container").hide();
                        $("#node-input-variable-container").show();
                        updateSystemVariableOptions();
                    }
                }

                updateVariableTypeOptions();
                $("#node-input-variabletype").on("change",function() {
                    updateVariableTypeOptions();
                });
            //}}}

            //{{{ Families
                RED.comms.homegear().invoke("listFamilies", function(message) {
                    var familySelect = $("#node-input-family");
                    $.each(message.result, function() {
                        familySelect.append($("<option />").val(this.ID).text(this.NAME));
                    });
                    familySelect.val(node.family);
                });
            //}}}

            //{{{ Variables
                function updateVariableOptions() {
                    var currentPeerId = parseInt($("#node-input-peerid").val());
                    var currentChannel = parseInt($("#node-input-channel").val());
                    var variableSelect = $("#node-input-variable");
                    variableSelect.empty();
                    if(currentPeerId && (currentChannel === 0 || currentChannel >= 1)) {
                        variables = {};
                        RED.comms.homegear().invoke("getParamsetDescription", function(message) {
                            if(!message.result) return;
                            var parameters = message.result;
                            $.each(parameters, function() {
                                if(!this.ID || !(this.OPERATIONS & 2)) return;
                                variables[this.ID] = {};
                                variables[this.ID].id = this.ID;
                                variables[this.ID].type = this.TYPE;
                                variables[this.ID].unit = this.UNIT;
                                if(this.TYPE != "BOOL" && this.TYPE != "ACTION") variables[this.ID].min = this.MIN;
                                if(this.TYPE != "BOOL" && this.TYPE != "ACTION") variables[this.ID].max = this.MAX;
                                if(this.SPECIAL) variables[this.ID].special = this.SPECIAL;
                                if(this.VALUE_LIST) variables[this.ID].valueList = this.VALUE_LIST;
                                if(this.LABEL) variables[this.ID].label = this.LABEL;
                                if(this.DESCRIPTION) variables[this.ID].label = this.DESCRIPTION;
                                variableSelect.append($("<option />").val(this.ID).text(this.ID));
                            });
                            variableSelect.val(node.variable);
                            updateVariableInfo();
                        }, currentPeerId, currentChannel, "VALUES");
                    }
                }

                $("#node-input-channel").on("change",function() {
                    updateVariableOptions();
                    updateName();
                });

                $("#node-input-variable").on("change",function() {
                    updateVariableInfo();
                });
            //}}}

            //{{{ Channels
                function updateName() {
                    node.peername = null;
                    var currentPeerId = parseInt($("#node-input-peerid").val());
                    var currentChannel = parseInt($("#node-input-channel").val());
                    if(currentPeerId != 0 && (currentChannel === 0 || currentChannel >= 1)) {
                        RED.comms.homegear().invoke("getName", function(message) {
                            if(message.result !== "") {
                                node.peername = message.result;
                            } else {
                                RED.comms.homegear().invoke("getName", function(message) {
                                    if(message.result !== "") node.peername = message.result;
                                }, currentPeerId);
                            }
                        }, currentPeerId, currentChannel);
                    }
                }

                function updateChannelOptions() {
                    var currentPeerId = parseInt($("#node-input-peerid").val());
                    var channelSelect = $("#node-input-channel");
                    channelSelect.empty();
                    $("#node-input-variable").empty();
                    if(currentPeerId) {
                        currentDevice = {};
                        RED.comms.homegear().invoke("getDeviceDescription", function(message) {
                            if(!message.result) return;
                            var channels = message.result.CHANNELS;
                            var channelCount = channels.length;
                            $.each(channels, function() {
                                RED.comms.homegear().invoke("getDeviceDescription", function(message) {
                                    channelCount--;
                                    if(message.result && typeof message.result.CHANNEL == "number" && message.result.PARAMSETS && message.result.PARAMSETS.indexOf("VALUES") !== -1) {
                                        currentDevice[message.result.CHANNEL] = {};
                                        currentDevice[message.result.CHANNEL].channel = message.result.CHANNEL;
                                        currentDevice[message.result.CHANNEL].type = (message.result.NAME ? message.result.NAME : (message.result.TYPE ? message.result.TYPE : ""));
                                    }
                                    if(!channelCount)
                                    {
                                        $.each(currentDevice, function() {
                                            channelSelect.append($("<option />").val(this.channel).text(this.channel + (this.type ? " (" + this.type + ")" : "")));
                                        });
                                        channelSelect.val(node.channel);
                                        if(channelSelect.val()) channelSelect.removeClass("input-error");
                                        updateVariableOptions();
                                        updateName();
                                    }
                                }, currentPeerId, this);
                            });
                        }, currentPeerId, -1);
                    }
                }

                $("#node-input-peerid").on("change",function() {
                    var variableType = $("#node-input-variabletype").val();
                    if (variableType == "device") {
                        updateChannelOptions();
                    } else if(variableType == "metadata") {
                        updateMetadataVariableOptions();
                    }
                });
            //}}}

            //{{{ Peers
                function fillPeerIdOptions() {
                    $("#node-input-peerid").empty();
                    $("#node-input-channel").empty();
                    $("#node-input-variable").empty();
                    var variableType = $("#node-input-variabletype").val();
                    var currentFamily = $("#node-input-family").val();
                    var peerSelect = $("#node-input-peerid");
                    $.each(devices, function() {
                       if(this.family == currentFamily) peerSelect.append($("<option />").val(this.id).text(this.id + (this.name ? " (" + this.name + ")" : (this.type ? " (" + this.type + ")" : "")))); 
                    });
                    peerSelect.val(node.peerid);
                    if(peerSelect.val()) peerSelect.removeClass("input-error");
                    if (variableType == "device") {
                        updateChannelOptions();
                    } else if(variableType == "metadata") {
                        updateMetadataVariableOptions();
                    }
                }

                RED.comms.homegear().invoke("listDevices", function(message) {
                    var familySelect = $("#node-input-family");
                    $.each(message.result, function() {
                        devices[this.ID] = {};
                        devices[this.ID].id = this.ID;
                        devices[this.ID].family = this.FAMILY;
                        devices[this.ID].type = this.TYPE;
                        devices[this.ID].name = this.NAME;
                    });
                    fillPeerIdOptions();
                }, false, ["ID", "FAMILY", "TYPE", "NAME"]);

                $("#node-input-family").on("change",function() {
                    fillPeerIdOptions();
                });
            //}}}

            function updateSwitchOptions() {
                var lightType = $("#node-input-lighttype").val();
                if (lightType == "dimmerstate") {
                    $("#node-input-dimmerstate").show();
                    $("#node-input-dimmer").hide();
                    $("#node-input-twoinputs-container").show();
                } else if(lightType == "switch") {
                    $("#node-input-dimmerstate").hide();
                    $("#node-input-dimmer").hide();
                    $("#node-input-twoinputs-container").show();
                } else {
                    $("#node-input-dimmerstate").hide();
                    $("#node-input-dimmer").show();
                    $("#node-input-twoinputs-container").hide();
                    $("#node-input-twoinputs").prop("checked", false);
                }
            }
            updateSwitchOptions();
            $("#node-input-lighttype").on("change",function() {
                updateSwitchOptions();
            });
        },
        oneditsave: function() {
            if($("#node-input-lighttype").val() == "dimmer") this.inputs = 4;
            else this.inputs = $("#node-input-twoinputs").prop('checked') ? 2 : 1;
        }
    });
</script>

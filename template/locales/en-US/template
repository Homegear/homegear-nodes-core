{
  "template/template.hni": {
    "template": {
      "label": {
        "template": "Template",
        "property": "Set property",
        "format": "Syntax Highlight",
        "syntax": "Format",
        "output": "Output as",
        "mustache": "Mustache template",
        "plain": "Plain text",
        "json": "Parsed JSON"
      },
      "templatevalue": "This is the payload: {{payload}} !",
      "paletteHelp": "<p>Sets a property based on the provided template.</p>",
      "help": "<p>Sets a property based on the provided template.</p><h3>Inputs</h3><dl class=\"message-properties\"><dt>$message <span class=\"property-type\">struct</span></dt><dd>A $message object containing information to populate the template.</dd></dl><p>Note: When not using Mustache, select <code>Plain text</code> in <code>Format</code> to save ressources.</p><h3>Outputs</h3><p>Setting <code>Output as</code> to <code>Plain text</code> always outputs a <code>String</code>. Setting it to <code>Parsed JSON</code> parses the template and converts it according to the JSON rules (i. e. <code>20</code> is parsed to an <code>Integer</code>, <code>20.1</code> to a <code>Float</code>, <code>\"My text\"</code> to a <code>String</code>, <code>[0, 2, 3]</code> to an <code>Array</code> and so on).</p><dl class=\"message-properties\"><dt>$message <span class=\"property-type\">struct</span></dt><dd>a $message with a property set by populating the configured template with properties from the incoming $message.</dd></dl><h3>Details</h3><p>By default this uses the <i><a href=\"http://mustache.github.io/mustache.5.html\" target=\"_blank\">mustache</a></i> format, but this can be switched off if required.</p><p>For example, when a template of: <pre>Hello {{name}}. Today is {{date}}</pre><p>receives a message containing: <pre>{\n  name: \"Fred\",\n  date: \"Monday\"\n  payload: ...\n}</pre></p><p>The resulting property will be: <pre>Hello Fred. Today is Monday</pre></p><p>It is possible to use a property from the flow context or global context. Just use <code>{{flow.name}}</code> or <code>{{global.name}}</code>.</p><p><b>Note: </b>By default, <i>mustache</i> will escape any HTML entities in the values it substitutes. To prevent this, use <code>{{{triple}}}</code> braces.</p>"
    }
  }
}